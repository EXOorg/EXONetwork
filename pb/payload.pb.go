// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/payload.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PayloadType int32

const (
	CoinbaseType      PayloadType = 0
	TransferAssetType PayloadType = 1
	CommitType        PayloadType = 2
	RegisterNameType  PayloadType = 3
	TransferNameType  PayloadType = 4
	DeleteNameType    PayloadType = 5
	SubscribeType     PayloadType = 6
)

var PayloadType_name = map[int32]string{
	0: "CoinbaseType",
	1: "TransferAssetType",
	2: "CommitType",
	3: "RegisterNameType",
	4: "TransferNameType",
	5: "DeleteNameType",
	6: "SubscribeType",
}
var PayloadType_value = map[string]int32{
	"CoinbaseType":      0,
	"TransferAssetType": 1,
	"CommitType":        2,
	"RegisterNameType":  3,
	"TransferNameType":  4,
	"DeleteNameType":    5,
	"SubscribeType":     6,
}

func (PayloadType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_payload_420a4804ab350b67, []int{0}
}

type Payload struct {
	Type PayloadType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.PayloadType" json:"Type,omitempty"`
	Data []byte      `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Payload) Reset()      { *m = Payload{} }
func (*Payload) ProtoMessage() {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_payload_420a4804ab350b67, []int{0}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(dst, src)
}
func (m *Payload) XXX_Size() int {
	return m.Size()
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetType() PayloadType {
	if m != nil {
		return m.Type
	}
	return CoinbaseType
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Coinbase struct {
	Sender    []byte `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Recipient []byte `protobuf:"bytes,2,opt,name=Recipient,proto3" json:"Recipient,omitempty"`
	Amount    int64  `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *Coinbase) Reset()      { *m = Coinbase{} }
func (*Coinbase) ProtoMessage() {}
func (*Coinbase) Descriptor() ([]byte, []int) {
	return fileDescriptor_payload_420a4804ab350b67, []int{1}
}
func (m *Coinbase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coinbase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coinbase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Coinbase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coinbase.Merge(dst, src)
}
func (m *Coinbase) XXX_Size() int {
	return m.Size()
}
func (m *Coinbase) XXX_DiscardUnknown() {
	xxx_messageInfo_Coinbase.DiscardUnknown(m)
}

var xxx_messageInfo_Coinbase proto.InternalMessageInfo

func (m *Coinbase) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Coinbase) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *Coinbase) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Commit struct {
	SigChain  []byte `protobuf:"bytes,1,opt,name=SigChain,proto3" json:"SigChain,omitempty"`
	Submitter []byte `protobuf:"bytes,2,opt,name=Submitter,proto3" json:"Submitter,omitempty"`
}

func (m *Commit) Reset()      { *m = Commit{} }
func (*Commit) ProtoMessage() {}
func (*Commit) Descriptor() ([]byte, []int) {
	return fileDescriptor_payload_420a4804ab350b67, []int{2}
}
func (m *Commit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Commit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commit.Merge(dst, src)
}
func (m *Commit) XXX_Size() int {
	return m.Size()
}
func (m *Commit) XXX_DiscardUnknown() {
	xxx_messageInfo_Commit.DiscardUnknown(m)
}

var xxx_messageInfo_Commit proto.InternalMessageInfo

func (m *Commit) GetSigChain() []byte {
	if m != nil {
		return m.SigChain
	}
	return nil
}

func (m *Commit) GetSubmitter() []byte {
	if m != nil {
		return m.Submitter
	}
	return nil
}

type DeleteName struct {
	Registrant []byte `protobuf:"bytes,1,opt,name=Registrant,proto3" json:"Registrant,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *DeleteName) Reset()      { *m = DeleteName{} }
func (*DeleteName) ProtoMessage() {}
func (*DeleteName) Descriptor() ([]byte, []int) {
	return fileDescriptor_payload_420a4804ab350b67, []int{3}
}
func (m *DeleteName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteName.Merge(dst, src)
}
func (m *DeleteName) XXX_Size() int {
	return m.Size()
}
func (m *DeleteName) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteName.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteName proto.InternalMessageInfo

func (m *DeleteName) GetRegistrant() []byte {
	if m != nil {
		return m.Registrant
	}
	return nil
}

func (m *DeleteName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RegisterName struct {
	Registrant []byte `protobuf:"bytes,1,opt,name=Registrant,proto3" json:"Registrant,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *RegisterName) Reset()      { *m = RegisterName{} }
func (*RegisterName) ProtoMessage() {}
func (*RegisterName) Descriptor() ([]byte, []int) {
	return fileDescriptor_payload_420a4804ab350b67, []int{4}
}
func (m *RegisterName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterName.Merge(dst, src)
}
func (m *RegisterName) XXX_Size() int {
	return m.Size()
}
func (m *RegisterName) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterName.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterName proto.InternalMessageInfo

func (m *RegisterName) GetRegistrant() []byte {
	if m != nil {
		return m.Registrant
	}
	return nil
}

func (m *RegisterName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Subscribe struct {
	Subscriber []byte `protobuf:"bytes,1,opt,name=Subscriber,proto3" json:"Subscriber,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	Topic      string `protobuf:"bytes,3,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Bucket     uint32 `protobuf:"varint,4,opt,name=Bucket,proto3" json:"Bucket,omitempty"`
	Duration   uint32 `protobuf:"varint,5,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Meta       string `protobuf:"bytes,6,opt,name=Meta,proto3" json:"Meta,omitempty"`
}

func (m *Subscribe) Reset()      { *m = Subscribe{} }
func (*Subscribe) ProtoMessage() {}
func (*Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_payload_420a4804ab350b67, []int{5}
}
func (m *Subscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscribe.Merge(dst, src)
}
func (m *Subscribe) XXX_Size() int {
	return m.Size()
}
func (m *Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Subscribe proto.InternalMessageInfo

func (m *Subscribe) GetSubscriber() []byte {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

func (m *Subscribe) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Subscribe) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Subscribe) GetBucket() uint32 {
	if m != nil {
		return m.Bucket
	}
	return 0
}

func (m *Subscribe) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Subscribe) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

type TransferAsset struct {
	Sender    []byte `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Recipient []byte `protobuf:"bytes,2,opt,name=Recipient,proto3" json:"Recipient,omitempty"`
	Amount    int64  `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *TransferAsset) Reset()      { *m = TransferAsset{} }
func (*TransferAsset) ProtoMessage() {}
func (*TransferAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_payload_420a4804ab350b67, []int{6}
}
func (m *TransferAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferAsset.Merge(dst, src)
}
func (m *TransferAsset) XXX_Size() int {
	return m.Size()
}
func (m *TransferAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferAsset.DiscardUnknown(m)
}

var xxx_messageInfo_TransferAsset proto.InternalMessageInfo

func (m *TransferAsset) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *TransferAsset) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *TransferAsset) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*Payload)(nil), "pb.Payload")
	proto.RegisterType((*Coinbase)(nil), "pb.Coinbase")
	proto.RegisterType((*Commit)(nil), "pb.Commit")
	proto.RegisterType((*DeleteName)(nil), "pb.DeleteName")
	proto.RegisterType((*RegisterName)(nil), "pb.RegisterName")
	proto.RegisterType((*Subscribe)(nil), "pb.Subscribe")
	proto.RegisterType((*TransferAsset)(nil), "pb.TransferAsset")
	proto.RegisterEnum("pb.PayloadType", PayloadType_name, PayloadType_value)
}
func (x PayloadType) String() string {
	s, ok := PayloadType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Payload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Payload)
	if !ok {
		that2, ok := that.(Payload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Coinbase) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Coinbase)
	if !ok {
		that2, ok := that.(Coinbase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	if !bytes.Equal(this.Recipient, that1.Recipient) {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *Commit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Commit)
	if !ok {
		that2, ok := that.(Commit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SigChain, that1.SigChain) {
		return false
	}
	if !bytes.Equal(this.Submitter, that1.Submitter) {
		return false
	}
	return true
}
func (this *DeleteName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteName)
	if !ok {
		that2, ok := that.(DeleteName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Registrant, that1.Registrant) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RegisterName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterName)
	if !ok {
		that2, ok := that.(RegisterName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Registrant, that1.Registrant) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Subscribe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subscribe)
	if !ok {
		that2, ok := that.(Subscribe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Subscriber, that1.Subscriber) {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if this.Bucket != that1.Bucket {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Meta != that1.Meta {
		return false
	}
	return true
}
func (this *TransferAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferAsset)
	if !ok {
		that2, ok := that.(TransferAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	if !bytes.Equal(this.Recipient, that1.Recipient) {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *Payload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Payload{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Coinbase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Coinbase{")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Commit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Commit{")
	s = append(s, "SigChain: "+fmt.Sprintf("%#v", this.SigChain)+",\n")
	s = append(s, "Submitter: "+fmt.Sprintf("%#v", this.Submitter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.DeleteName{")
	s = append(s, "Registrant: "+fmt.Sprintf("%#v", this.Registrant)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RegisterName{")
	s = append(s, "Registrant: "+fmt.Sprintf("%#v", this.Registrant)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Subscribe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.Subscribe{")
	s = append(s, "Subscriber: "+fmt.Sprintf("%#v", this.Subscriber)+",\n")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "Bucket: "+fmt.Sprintf("%#v", this.Bucket)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferAsset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TransferAsset{")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPayload(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayload(dAtA, i, uint64(m.Type))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Coinbase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coinbase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if len(m.Recipient) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Recipient)))
		i += copy(dAtA[i:], m.Recipient)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPayload(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *Commit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SigChain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.SigChain)))
		i += copy(dAtA[i:], m.SigChain)
	}
	if len(m.Submitter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Submitter)))
		i += copy(dAtA[i:], m.Submitter)
	}
	return i, nil
}

func (m *DeleteName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Registrant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Registrant)))
		i += copy(dAtA[i:], m.Registrant)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *RegisterName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Registrant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Registrant)))
		i += copy(dAtA[i:], m.Registrant)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Subscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subscriber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Subscriber)))
		i += copy(dAtA[i:], m.Subscriber)
	}
	if len(m.Identifier) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Identifier)))
		i += copy(dAtA[i:], m.Identifier)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if m.Bucket != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPayload(dAtA, i, uint64(m.Bucket))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPayload(dAtA, i, uint64(m.Duration))
	}
	if len(m.Meta) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Meta)))
		i += copy(dAtA[i:], m.Meta)
	}
	return i, nil
}

func (m *TransferAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferAsset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if len(m.Recipient) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayload(dAtA, i, uint64(len(m.Recipient)))
		i += copy(dAtA[i:], m.Recipient)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPayload(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func encodeVarintPayload(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedPayload(r randyPayload, easy bool) *Payload {
	this := &Payload{}
	this.Type = PayloadType([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	v1 := r.Intn(100)
	this.Data = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCoinbase(r randyPayload, easy bool) *Coinbase {
	this := &Coinbase{}
	v2 := r.Intn(100)
	this.Sender = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Sender[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(100)
	this.Recipient = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Recipient[i] = byte(r.Intn(256))
	}
	this.Amount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Amount *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCommit(r randyPayload, easy bool) *Commit {
	this := &Commit{}
	v4 := r.Intn(100)
	this.SigChain = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.SigChain[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(100)
	this.Submitter = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Submitter[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteName(r randyPayload, easy bool) *DeleteName {
	this := &DeleteName{}
	v6 := r.Intn(100)
	this.Registrant = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Registrant[i] = byte(r.Intn(256))
	}
	this.Name = string(randStringPayload(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRegisterName(r randyPayload, easy bool) *RegisterName {
	this := &RegisterName{}
	v7 := r.Intn(100)
	this.Registrant = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Registrant[i] = byte(r.Intn(256))
	}
	this.Name = string(randStringPayload(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubscribe(r randyPayload, easy bool) *Subscribe {
	this := &Subscribe{}
	v8 := r.Intn(100)
	this.Subscriber = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.Subscriber[i] = byte(r.Intn(256))
	}
	this.Identifier = string(randStringPayload(r))
	this.Topic = string(randStringPayload(r))
	this.Bucket = uint32(r.Uint32())
	this.Duration = uint32(r.Uint32())
	this.Meta = string(randStringPayload(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransferAsset(r randyPayload, easy bool) *TransferAsset {
	this := &TransferAsset{}
	v9 := r.Intn(100)
	this.Sender = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Sender[i] = byte(r.Intn(256))
	}
	v10 := r.Intn(100)
	this.Recipient = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Recipient[i] = byte(r.Intn(256))
	}
	this.Amount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Amount *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPayload interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePayload(r randyPayload) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPayload(r randyPayload) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RunePayload(r)
	}
	return string(tmps)
}
func randUnrecognizedPayload(r randyPayload, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPayload(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPayload(dAtA []byte, r randyPayload, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePayload(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulatePayload(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulatePayload(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePayload(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePayload(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePayload(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePayload(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPayload(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	return n
}

func (m *Coinbase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPayload(uint64(m.Amount))
	}
	return n
}

func (m *Commit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SigChain)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	return n
}

func (m *DeleteName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Registrant)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	return n
}

func (m *RegisterName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Registrant)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	return n
}

func (m *Subscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	if m.Bucket != 0 {
		n += 1 + sovPayload(uint64(m.Bucket))
	}
	if m.Duration != 0 {
		n += 1 + sovPayload(uint64(m.Duration))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	return n
}

func (m *TransferAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovPayload(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPayload(uint64(m.Amount))
	}
	return n
}

func sovPayload(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPayload(x uint64) (n int) {
	return sovPayload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Payload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Payload{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Coinbase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Coinbase{`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Recipient:` + fmt.Sprintf("%v", this.Recipient) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Commit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Commit{`,
		`SigChain:` + fmt.Sprintf("%v", this.SigChain) + `,`,
		`Submitter:` + fmt.Sprintf("%v", this.Submitter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteName{`,
		`Registrant:` + fmt.Sprintf("%v", this.Registrant) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterName{`,
		`Registrant:` + fmt.Sprintf("%v", this.Registrant) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Subscribe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Subscribe{`,
		`Subscriber:` + fmt.Sprintf("%v", this.Subscriber) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferAsset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferAsset{`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Recipient:` + fmt.Sprintf("%v", this.Recipient) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPayload(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PayloadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coinbase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coinbase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coinbase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Commit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigChain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigChain = append(m.SigChain[:0], dAtA[iNdEx:postIndex]...)
			if m.SigChain == nil {
				m.SigChain = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrant = append(m.Registrant[:0], dAtA[iNdEx:postIndex]...)
			if m.Registrant == nil {
				m.Registrant = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrant = append(m.Registrant[:0], dAtA[iNdEx:postIndex]...)
			if m.Registrant == nil {
				m.Registrant = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = append(m.Subscriber[:0], dAtA[iNdEx:postIndex]...)
			if m.Subscriber == nil {
				m.Subscriber = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			m.Bucket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bucket |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPayload
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPayload
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPayload(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPayload = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayload   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/payload.proto", fileDescriptor_payload_420a4804ab350b67) }

var fileDescriptor_payload_420a4804ab350b67 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0xf9, 0xc7, 0x65, 0x48, 0x42, 0x6e, 0x75, 0x20, 0xeb, 0x84, 0x56, 0x91, 0x69,
	0x22, 0x24, 0x12, 0x09, 0x5a, 0x0a, 0x2e, 0x49, 0x43, 0x01, 0x42, 0x9b, 0x14, 0x34, 0x14, 0xeb,
	0x64, 0xe3, 0x5b, 0x71, 0xf6, 0x5a, 0xf6, 0xba, 0xb8, 0x8e, 0x47, 0xa0, 0xe5, 0x0d, 0xe0, 0x0d,
	0x78, 0x04, 0xca, 0x94, 0x57, 0x12, 0xa7, 0xa1, 0xbc, 0x92, 0x12, 0xed, 0xd8, 0xf1, 0x99, 0x16,
	0xd1, 0xcd, 0xf7, 0x9b, 0x9d, 0x4f, 0xb3, 0xb3, 0xb3, 0x30, 0x8c, 0xfd, 0x69, 0x2c, 0xae, 0xaf,
	0xb4, 0xd8, 0x4c, 0xe2, 0x44, 0x1b, 0x4d, 0x1b, 0xb1, 0x7f, 0xfe, 0x2c, 0x50, 0xe6, 0x32, 0xf3,
	0x27, 0x6b, 0x1d, 0x4e, 0x03, 0x1d, 0xe8, 0x29, 0xa6, 0xfc, 0x6c, 0x8b, 0x0a, 0x05, 0x46, 0x45,
	0x89, 0x37, 0x83, 0x7b, 0xef, 0x0a, 0x0f, 0xfa, 0x04, 0x5a, 0xab, 0xeb, 0x58, 0xba, 0x64, 0x44,
	0xc6, 0x83, 0xe7, 0x0f, 0x26, 0xb1, 0x3f, 0x29, 0x53, 0x16, 0x73, 0x4c, 0x52, 0x0a, 0xad, 0x85,
	0x30, 0xc2, 0x6d, 0x8c, 0xc8, 0xb8, 0xc7, 0x31, 0xf6, 0xde, 0xc3, 0xc9, 0x5c, 0xab, 0xc8, 0x17,
	0xa9, 0xa4, 0x8f, 0xa0, 0xb3, 0x94, 0xd1, 0x46, 0x26, 0x68, 0xd3, 0xe3, 0xa5, 0xa2, 0x8f, 0xa1,
	0xcb, 0xe5, 0x5a, 0xc5, 0x4a, 0x46, 0xa6, 0x2c, 0xbe, 0x03, 0xb6, 0xea, 0x22, 0xd4, 0x59, 0x64,
	0xdc, 0xe6, 0x88, 0x8c, 0x9b, 0xbc, 0x54, 0xde, 0x0c, 0x3a, 0x73, 0x1d, 0x86, 0xca, 0xd0, 0x73,
	0x38, 0x59, 0xaa, 0x60, 0x7e, 0x29, 0x54, 0x54, 0x3a, 0x57, 0xda, 0x7a, 0x2f, 0x33, 0x3f, 0x54,
	0xc6, 0xc8, 0xe4, 0xe8, 0x5d, 0x01, 0xef, 0x15, 0xc0, 0x42, 0x5e, 0x49, 0x23, 0xdf, 0x8a, 0x50,
	0x52, 0x06, 0xc0, 0x65, 0xa0, 0x52, 0x93, 0x88, 0xc8, 0x94, 0x4e, 0x35, 0x62, 0xef, 0x67, 0xcf,
	0xa1, 0x4d, 0x97, 0x63, 0xec, 0xcd, 0xa0, 0x57, 0x9c, 0x90, 0xc9, 0x3f, 0x7b, 0x7c, 0x23, 0xd8,
	0x64, 0xba, 0x4e, 0x94, 0x8f, 0x0e, 0x95, 0x38, 0x4e, 0xaa, 0x46, 0x6c, 0xfe, 0xf5, 0x46, 0x46,
	0x46, 0x6d, 0x55, 0x79, 0xa5, 0x2e, 0xaf, 0x11, 0x7a, 0x06, 0xed, 0x95, 0x8e, 0xd5, 0x1a, 0xc7,
	0xd5, 0xe5, 0x85, 0xb0, 0x53, 0x9c, 0x65, 0xeb, 0x8f, 0xd2, 0xb8, 0xad, 0x11, 0x19, 0xf7, 0x79,
	0xa9, 0xec, 0xec, 0x16, 0x59, 0x22, 0x8c, 0xd2, 0x91, 0xdb, 0xc6, 0x4c, 0xa5, 0x6d, 0xaf, 0x6f,
	0xa4, 0x11, 0x6e, 0xa7, 0xe8, 0xd5, 0xc6, 0xde, 0x07, 0xe8, 0xaf, 0x12, 0x11, 0xa5, 0x5b, 0x99,
	0x5c, 0xa4, 0xa9, 0x34, 0xff, 0xf7, 0x51, 0x9f, 0x7e, 0x21, 0x70, 0xbf, 0xb6, 0x58, 0x74, 0x08,
	0xbd, 0xe3, 0xfa, 0x58, 0x3d, 0x74, 0xe8, 0x43, 0x38, 0xfd, 0xab, 0x01, 0xc4, 0x84, 0x0e, 0x00,
	0x8a, 0x6d, 0x40, 0xdd, 0xa0, 0x67, 0x30, 0xac, 0xbf, 0x0b, 0xd2, 0xa6, 0xa5, 0xc7, 0xe2, 0x8a,
	0xb6, 0x28, 0x85, 0xc1, 0xdd, 0x16, 0x20, 0x6b, 0xd3, 0x53, 0xe8, 0x57, 0x33, 0x47, 0xd4, 0x99,
	0xbd, 0xdc, 0xed, 0x99, 0x73, 0xb3, 0x67, 0xce, 0xed, 0x9e, 0x91, 0xdf, 0x7b, 0x46, 0x3e, 0xe5,
	0x8c, 0x7c, 0xcd, 0x19, 0xf9, 0x9e, 0x33, 0xf2, 0x23, 0x67, 0x64, 0x97, 0x33, 0xf2, 0x33, 0x67,
	0xe4, 0x57, 0xce, 0x9c, 0xdb, 0x9c, 0x91, 0xcf, 0x07, 0xe6, 0xec, 0x0e, 0xcc, 0xb9, 0x39, 0x30,
	0xc7, 0xef, 0xe0, 0x9f, 0x7a, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x54, 0xd5, 0xeb, 0x9a,
	0x03, 0x00, 0x00,
}
