// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/header.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type WinnerType int32

const (
	GenesisSigner WinnerType = 0
	TxnSigner     WinnerType = 1
	BlockSigner   WinnerType = 2
)

var WinnerType_name = map[int32]string{
	0: "GenesisSigner",
	1: "TxnSigner",
	2: "BlockSigner",
}
var WinnerType_value = map[string]int32{
	"GenesisSigner": 0,
	"TxnSigner":     1,
	"BlockSigner":   2,
}

func (WinnerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_header_f3831c9befe0cfcf, []int{0}
}

type UnsignedHeader struct {
	Version          uint32     `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	PrevBlockHash    []byte     `protobuf:"bytes,2,opt,name=PrevBlockHash,proto3" json:"PrevBlockHash,omitempty"`
	TransactionsRoot []byte     `protobuf:"bytes,3,opt,name=TransactionsRoot,proto3" json:"TransactionsRoot,omitempty"`
	StateRoot        []byte     `protobuf:"bytes,4,opt,name=StateRoot,proto3" json:"StateRoot,omitempty"`
	Timestamp        int64      `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Height           uint32     `protobuf:"varint,6,opt,name=Height,proto3" json:"Height,omitempty"`
	ConsensusData    uint64     `protobuf:"varint,7,opt,name=ConsensusData,proto3" json:"ConsensusData,omitempty"`
	NextBookKeeper   []byte     `protobuf:"bytes,8,opt,name=NextBookKeeper,proto3" json:"NextBookKeeper,omitempty"`
	WinnerHash       []byte     `protobuf:"bytes,9,opt,name=WinnerHash,proto3" json:"WinnerHash,omitempty"`
	WinnerType       WinnerType `protobuf:"varint,10,opt,name=WinnerType,proto3,enum=pb.WinnerType" json:"WinnerType,omitempty"`
	Signer           []byte     `protobuf:"bytes,11,opt,name=Signer,proto3" json:"Signer,omitempty"`
	ChordID          []byte     `protobuf:"bytes,12,opt,name=ChordID,proto3" json:"ChordID,omitempty"`
}

func (m *UnsignedHeader) Reset()      { *m = UnsignedHeader{} }
func (*UnsignedHeader) ProtoMessage() {}
func (*UnsignedHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_header_f3831c9befe0cfcf, []int{0}
}
func (m *UnsignedHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnsignedHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedHeader.Merge(dst, src)
}
func (m *UnsignedHeader) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedHeader.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedHeader proto.InternalMessageInfo

func (m *UnsignedHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UnsignedHeader) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *UnsignedHeader) GetTransactionsRoot() []byte {
	if m != nil {
		return m.TransactionsRoot
	}
	return nil
}

func (m *UnsignedHeader) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *UnsignedHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UnsignedHeader) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *UnsignedHeader) GetConsensusData() uint64 {
	if m != nil {
		return m.ConsensusData
	}
	return 0
}

func (m *UnsignedHeader) GetNextBookKeeper() []byte {
	if m != nil {
		return m.NextBookKeeper
	}
	return nil
}

func (m *UnsignedHeader) GetWinnerHash() []byte {
	if m != nil {
		return m.WinnerHash
	}
	return nil
}

func (m *UnsignedHeader) GetWinnerType() WinnerType {
	if m != nil {
		return m.WinnerType
	}
	return GenesisSigner
}

func (m *UnsignedHeader) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *UnsignedHeader) GetChordID() []byte {
	if m != nil {
		return m.ChordID
	}
	return nil
}

type BlockHeader struct {
	UnsignedHeader *UnsignedHeader `protobuf:"bytes,1,opt,name=UnsignedHeader" json:"UnsignedHeader,omitempty"`
	Signature      []byte          `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Program        *Program        `protobuf:"bytes,3,opt,name=Program" json:"Program,omitempty"`
}

func (m *BlockHeader) Reset()      { *m = BlockHeader{} }
func (*BlockHeader) ProtoMessage() {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_header_f3831c9befe0cfcf, []int{1}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(dst, src)
}
func (m *BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetUnsignedHeader() *UnsignedHeader {
	if m != nil {
		return m.UnsignedHeader
	}
	return nil
}

func (m *BlockHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BlockHeader) GetProgram() *Program {
	if m != nil {
		return m.Program
	}
	return nil
}

func init() {
	proto.RegisterType((*UnsignedHeader)(nil), "pb.UnsignedHeader")
	proto.RegisterType((*BlockHeader)(nil), "pb.BlockHeader")
	proto.RegisterEnum("pb.WinnerType", WinnerType_name, WinnerType_value)
}
func (x WinnerType) String() string {
	s, ok := WinnerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UnsignedHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnsignedHeader)
	if !ok {
		that2, ok := that.(UnsignedHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.PrevBlockHash, that1.PrevBlockHash) {
		return false
	}
	if !bytes.Equal(this.TransactionsRoot, that1.TransactionsRoot) {
		return false
	}
	if !bytes.Equal(this.StateRoot, that1.StateRoot) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.ConsensusData != that1.ConsensusData {
		return false
	}
	if !bytes.Equal(this.NextBookKeeper, that1.NextBookKeeper) {
		return false
	}
	if !bytes.Equal(this.WinnerHash, that1.WinnerHash) {
		return false
	}
	if this.WinnerType != that1.WinnerType {
		return false
	}
	if !bytes.Equal(this.Signer, that1.Signer) {
		return false
	}
	if !bytes.Equal(this.ChordID, that1.ChordID) {
		return false
	}
	return true
}
func (this *BlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockHeader)
	if !ok {
		that2, ok := that.(BlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UnsignedHeader.Equal(that1.UnsignedHeader) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !this.Program.Equal(that1.Program) {
		return false
	}
	return true
}
func (this *UnsignedHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.UnsignedHeader{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "PrevBlockHash: "+fmt.Sprintf("%#v", this.PrevBlockHash)+",\n")
	s = append(s, "TransactionsRoot: "+fmt.Sprintf("%#v", this.TransactionsRoot)+",\n")
	s = append(s, "StateRoot: "+fmt.Sprintf("%#v", this.StateRoot)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "ConsensusData: "+fmt.Sprintf("%#v", this.ConsensusData)+",\n")
	s = append(s, "NextBookKeeper: "+fmt.Sprintf("%#v", this.NextBookKeeper)+",\n")
	s = append(s, "WinnerHash: "+fmt.Sprintf("%#v", this.WinnerHash)+",\n")
	s = append(s, "WinnerType: "+fmt.Sprintf("%#v", this.WinnerType)+",\n")
	s = append(s, "Signer: "+fmt.Sprintf("%#v", this.Signer)+",\n")
	s = append(s, "ChordID: "+fmt.Sprintf("%#v", this.ChordID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.BlockHeader{")
	if this.UnsignedHeader != nil {
		s = append(s, "UnsignedHeader: "+fmt.Sprintf("%#v", this.UnsignedHeader)+",\n")
	}
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	if this.Program != nil {
		s = append(s, "Program: "+fmt.Sprintf("%#v", this.Program)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHeader(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UnsignedHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeader(dAtA, i, uint64(m.Version))
	}
	if len(m.PrevBlockHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeader(dAtA, i, uint64(len(m.PrevBlockHash)))
		i += copy(dAtA[i:], m.PrevBlockHash)
	}
	if len(m.TransactionsRoot) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHeader(dAtA, i, uint64(len(m.TransactionsRoot)))
		i += copy(dAtA[i:], m.TransactionsRoot)
	}
	if len(m.StateRoot) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHeader(dAtA, i, uint64(len(m.StateRoot)))
		i += copy(dAtA[i:], m.StateRoot)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHeader(dAtA, i, uint64(m.Timestamp))
	}
	if m.Height != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHeader(dAtA, i, uint64(m.Height))
	}
	if m.ConsensusData != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHeader(dAtA, i, uint64(m.ConsensusData))
	}
	if len(m.NextBookKeeper) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintHeader(dAtA, i, uint64(len(m.NextBookKeeper)))
		i += copy(dAtA[i:], m.NextBookKeeper)
	}
	if len(m.WinnerHash) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintHeader(dAtA, i, uint64(len(m.WinnerHash)))
		i += copy(dAtA[i:], m.WinnerHash)
	}
	if m.WinnerType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintHeader(dAtA, i, uint64(m.WinnerType))
	}
	if len(m.Signer) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintHeader(dAtA, i, uint64(len(m.Signer)))
		i += copy(dAtA[i:], m.Signer)
	}
	if len(m.ChordID) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintHeader(dAtA, i, uint64(len(m.ChordID)))
		i += copy(dAtA[i:], m.ChordID)
	}
	return i, nil
}

func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnsignedHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeader(dAtA, i, uint64(m.UnsignedHeader.Size()))
		n1, err := m.UnsignedHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeader(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Program != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHeader(dAtA, i, uint64(m.Program.Size()))
		n2, err := m.Program.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintHeader(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUnsignedHeader(r randyHeader, easy bool) *UnsignedHeader {
	this := &UnsignedHeader{}
	this.Version = uint32(r.Uint32())
	v1 := r.Intn(100)
	this.PrevBlockHash = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.PrevBlockHash[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.TransactionsRoot = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.TransactionsRoot[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(100)
	this.StateRoot = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.StateRoot[i] = byte(r.Intn(256))
	}
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Height = uint32(r.Uint32())
	this.ConsensusData = uint64(uint64(r.Uint32()))
	v4 := r.Intn(100)
	this.NextBookKeeper = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.NextBookKeeper[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(100)
	this.WinnerHash = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.WinnerHash[i] = byte(r.Intn(256))
	}
	this.WinnerType = WinnerType([]int32{0, 1, 2}[r.Intn(3)])
	v6 := r.Intn(100)
	this.Signer = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Signer[i] = byte(r.Intn(256))
	}
	v7 := r.Intn(100)
	this.ChordID = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.ChordID[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlockHeader(r randyHeader, easy bool) *BlockHeader {
	this := &BlockHeader{}
	if r.Intn(10) != 0 {
		this.UnsignedHeader = NewPopulatedUnsignedHeader(r, easy)
	}
	v8 := r.Intn(100)
	this.Signature = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Program = NewPopulatedProgram(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyHeader interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneHeader(r randyHeader) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringHeader(r randyHeader) string {
	v9 := r.Intn(100)
	tmps := make([]rune, v9)
	for i := 0; i < v9; i++ {
		tmps[i] = randUTF8RuneHeader(r)
	}
	return string(tmps)
}
func randUnrecognizedHeader(r randyHeader, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldHeader(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldHeader(dAtA []byte, r randyHeader, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateHeader(dAtA, uint64(key))
		v10 := r.Int63()
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		dAtA = encodeVarintPopulateHeader(dAtA, uint64(v10))
	case 1:
		dAtA = encodeVarintPopulateHeader(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateHeader(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateHeader(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateHeader(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateHeader(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UnsignedHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovHeader(uint64(m.Version))
	}
	l = len(m.PrevBlockHash)
	if l > 0 {
		n += 1 + l + sovHeader(uint64(l))
	}
	l = len(m.TransactionsRoot)
	if l > 0 {
		n += 1 + l + sovHeader(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovHeader(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovHeader(uint64(m.Timestamp))
	}
	if m.Height != 0 {
		n += 1 + sovHeader(uint64(m.Height))
	}
	if m.ConsensusData != 0 {
		n += 1 + sovHeader(uint64(m.ConsensusData))
	}
	l = len(m.NextBookKeeper)
	if l > 0 {
		n += 1 + l + sovHeader(uint64(l))
	}
	l = len(m.WinnerHash)
	if l > 0 {
		n += 1 + l + sovHeader(uint64(l))
	}
	if m.WinnerType != 0 {
		n += 1 + sovHeader(uint64(m.WinnerType))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovHeader(uint64(l))
	}
	l = len(m.ChordID)
	if l > 0 {
		n += 1 + l + sovHeader(uint64(l))
	}
	return n
}

func (m *BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsignedHeader != nil {
		l = m.UnsignedHeader.Size()
		n += 1 + l + sovHeader(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovHeader(uint64(l))
	}
	if m.Program != nil {
		l = m.Program.Size()
		n += 1 + l + sovHeader(uint64(l))
	}
	return n
}

func sovHeader(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHeader(x uint64) (n int) {
	return sovHeader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UnsignedHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnsignedHeader{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`PrevBlockHash:` + fmt.Sprintf("%v", this.PrevBlockHash) + `,`,
		`TransactionsRoot:` + fmt.Sprintf("%v", this.TransactionsRoot) + `,`,
		`StateRoot:` + fmt.Sprintf("%v", this.StateRoot) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`ConsensusData:` + fmt.Sprintf("%v", this.ConsensusData) + `,`,
		`NextBookKeeper:` + fmt.Sprintf("%v", this.NextBookKeeper) + `,`,
		`WinnerHash:` + fmt.Sprintf("%v", this.WinnerHash) + `,`,
		`WinnerType:` + fmt.Sprintf("%v", this.WinnerType) + `,`,
		`Signer:` + fmt.Sprintf("%v", this.Signer) + `,`,
		`ChordID:` + fmt.Sprintf("%v", this.ChordID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockHeader{`,
		`UnsignedHeader:` + strings.Replace(fmt.Sprintf("%v", this.UnsignedHeader), "UnsignedHeader", "UnsignedHeader", 1) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`Program:` + strings.Replace(fmt.Sprintf("%v", this.Program), "Program", "Program", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHeader(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UnsignedHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsignedHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsignedHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBlockHash = append(m.PrevBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevBlockHash == nil {
				m.PrevBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionsRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionsRoot = append(m.TransactionsRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TransactionsRoot == nil {
				m.TransactionsRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusData", wireType)
			}
			m.ConsensusData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusData |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextBookKeeper", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextBookKeeper = append(m.NextBookKeeper[:0], dAtA[iNdEx:postIndex]...)
			if m.NextBookKeeper == nil {
				m.NextBookKeeper = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinnerHash = append(m.WinnerHash[:0], dAtA[iNdEx:postIndex]...)
			if m.WinnerHash == nil {
				m.WinnerHash = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerType", wireType)
			}
			m.WinnerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinnerType |= (WinnerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChordID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChordID = append(m.ChordID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChordID == nil {
				m.ChordID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsignedHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnsignedHeader == nil {
				m.UnsignedHeader = &UnsignedHeader{}
			}
			if err := m.UnsignedHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeader
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Program == nil {
				m.Program = &Program{}
			}
			if err := m.Program.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHeader
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHeader
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHeader(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHeader = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeader   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/header.proto", fileDescriptor_header_f3831c9befe0cfcf) }

var fileDescriptor_header_f3831c9befe0cfcf = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x4f, 0x8b, 0x13, 0x31,
	0x18, 0xc6, 0x27, 0xed, 0xda, 0xda, 0x74, 0xdb, 0xad, 0x39, 0x48, 0x58, 0x24, 0x0c, 0x8b, 0xca,
	0xb0, 0xe0, 0x14, 0xea, 0x4d, 0x04, 0xa1, 0xbb, 0x60, 0x45, 0x90, 0x65, 0xb6, 0xea, 0x39, 0xd3,
	0xbe, 0xce, 0x0c, 0x6b, 0x93, 0x21, 0x49, 0x65, 0xbd, 0xf9, 0x09, 0xc4, 0x8f, 0xe0, 0xd1, 0x8f,
	0xe0, 0x47, 0xf0, 0xd8, 0xe3, 0x1e, 0xed, 0xf4, 0xe2, 0x71, 0x8f, 0x1e, 0x25, 0x99, 0x29, 0xfd,
	0xe3, 0x6d, 0x9e, 0xdf, 0xfb, 0x4c, 0xf2, 0xbe, 0xef, 0x13, 0x7c, 0x94, 0xc7, 0xfd, 0x14, 0xf8,
	0x14, 0x54, 0x98, 0x2b, 0x69, 0x24, 0xa9, 0xe5, 0xf1, 0xf1, 0x93, 0x24, 0x33, 0xe9, 0x3c, 0x0e,
	0x27, 0x72, 0xd6, 0x4f, 0x64, 0x22, 0xfb, 0xae, 0x14, 0xcf, 0x3f, 0x38, 0xe5, 0x84, 0xfb, 0x2a,
	0x7f, 0x39, 0xee, 0xe5, 0xb1, 0x75, 0x24, 0x8a, 0xcf, 0x4a, 0x72, 0xf2, 0xbd, 0x8e, 0xbb, 0x6f,
	0x85, 0xce, 0x12, 0x01, 0xd3, 0x91, 0x3b, 0x9d, 0x50, 0xdc, 0x7c, 0x07, 0x4a, 0x67, 0x52, 0x50,
	0xe4, 0xa3, 0xa0, 0x13, 0xad, 0x25, 0x79, 0x88, 0x3b, 0x17, 0x0a, 0x3e, 0x0d, 0x3f, 0xca, 0xc9,
	0xd5, 0x88, 0xeb, 0x94, 0xd6, 0x7c, 0x14, 0x1c, 0x46, 0xbb, 0x90, 0x9c, 0xe2, 0xde, 0x58, 0x71,
	0xa1, 0xf9, 0xc4, 0x64, 0x52, 0xe8, 0x48, 0x4a, 0x43, 0xeb, 0xce, 0xf8, 0x1f, 0x27, 0x0f, 0x70,
	0xeb, 0xd2, 0x70, 0x03, 0xce, 0x74, 0xe0, 0x4c, 0x1b, 0x60, 0xab, 0xe3, 0x6c, 0x06, 0xda, 0xf0,
	0x59, 0x4e, 0xef, 0xf8, 0x28, 0xa8, 0x47, 0x1b, 0x40, 0xee, 0xe3, 0xc6, 0x08, 0xb2, 0x24, 0x35,
	0xb4, 0xe1, 0xda, 0xac, 0x94, 0xed, 0xf2, 0x4c, 0x0a, 0x0d, 0x42, 0xcf, 0xf5, 0x39, 0x37, 0x9c,
	0x36, 0x7d, 0x14, 0x1c, 0x44, 0xbb, 0x90, 0x3c, 0xc6, 0xdd, 0x37, 0x70, 0x6d, 0x86, 0x52, 0x5e,
	0xbd, 0x06, 0xc8, 0x41, 0xd1, 0xbb, 0xee, 0xfa, 0x3d, 0x4a, 0x18, 0xc6, 0xef, 0x33, 0x21, 0x40,
	0xb9, 0x81, 0x5b, 0xce, 0xb3, 0x45, 0x48, 0xb8, 0xae, 0x8f, 0x3f, 0xe7, 0x40, 0xb1, 0x8f, 0x82,
	0xee, 0xa0, 0x1b, 0xe6, 0x71, 0xb8, 0xa1, 0xd1, 0x96, 0xc3, 0x76, 0x7d, 0x69, 0xb7, 0xad, 0x68,
	0xdb, 0x9d, 0x55, 0x29, 0xbb, 0xf5, 0xb3, 0x54, 0xaa, 0xe9, 0xab, 0x73, 0x7a, 0xe8, 0x0a, 0x6b,
	0x79, 0xf2, 0x15, 0xe1, 0x76, 0xb9, 0xdd, 0x32, 0x9f, 0x67, 0xfb, 0x89, 0xb9, 0x98, 0xda, 0x03,
	0x62, 0x6f, 0xdd, 0xad, 0x44, 0xfb, 0xd9, 0xda, 0x7d, 0x67, 0x89, 0xe0, 0x66, 0xae, 0xa0, 0x4a,
	0x6f, 0x03, 0xc8, 0x23, 0xdc, 0xbc, 0x28, 0x5f, 0x87, 0x0b, 0xac, 0x3d, 0x68, 0xdb, 0x23, 0x2b,
	0x14, 0xad, 0x6b, 0xa7, 0x2f, 0xb6, 0x47, 0x26, 0xf7, 0x70, 0xe7, 0x25, 0x08, 0xd0, 0x99, 0x2e,
	0x27, 0xe9, 0x79, 0xa4, 0x83, 0x5b, 0xe3, 0x6b, 0x51, 0x49, 0x44, 0x8e, 0xaa, 0xfe, 0x2b, 0x50,
	0x1b, 0x3e, 0x5f, 0x2c, 0x99, 0x77, 0xb3, 0x64, 0xde, 0xed, 0x92, 0xa1, 0xbf, 0x4b, 0x86, 0xbe,
	0x14, 0x0c, 0xfd, 0x28, 0x18, 0xfa, 0x59, 0x30, 0xf4, 0xab, 0x60, 0x68, 0x51, 0x30, 0xf4, 0xbb,
	0x60, 0xe8, 0x4f, 0xc1, 0xbc, 0xdb, 0x82, 0xa1, 0x6f, 0x2b, 0xe6, 0x2d, 0x56, 0xcc, 0xbb, 0x59,
	0x31, 0x2f, 0x6e, 0xb8, 0x97, 0xfb, 0xf4, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0xee, 0x10,
	0xff, 0x11, 0x03, 0x00, 0x00,
}
