// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/transaction.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PayloadType int32

const (
	COINBASE_TYPE       PayloadType = 0
	TRANSFER_ASSET_TYPE PayloadType = 1
	SIG_CHAIN_TXN_TYPE  PayloadType = 2
	REGISTER_NAME_TYPE  PayloadType = 3
	TRANSFER_NAME_TYPE  PayloadType = 4
	DELETE_NAME_TYPE    PayloadType = 5
	SUBSCRIBE_TYPE      PayloadType = 6
	UNSUBSCRIBE_TYPE    PayloadType = 7
	GENERATE_ID_TYPE    PayloadType = 8
	NANO_PAY_TYPE       PayloadType = 9
	ISSUE_ASSET_TYPE    PayloadType = 10
)

var PayloadType_name = map[int32]string{
	0:  "COINBASE_TYPE",
	1:  "TRANSFER_ASSET_TYPE",
	2:  "SIG_CHAIN_TXN_TYPE",
	3:  "REGISTER_NAME_TYPE",
	4:  "TRANSFER_NAME_TYPE",
	5:  "DELETE_NAME_TYPE",
	6:  "SUBSCRIBE_TYPE",
	7:  "UNSUBSCRIBE_TYPE",
	8:  "GENERATE_ID_TYPE",
	9:  "NANO_PAY_TYPE",
	10: "ISSUE_ASSET_TYPE",
}
var PayloadType_value = map[string]int32{
	"COINBASE_TYPE":       0,
	"TRANSFER_ASSET_TYPE": 1,
	"SIG_CHAIN_TXN_TYPE":  2,
	"REGISTER_NAME_TYPE":  3,
	"TRANSFER_NAME_TYPE":  4,
	"DELETE_NAME_TYPE":    5,
	"SUBSCRIBE_TYPE":      6,
	"UNSUBSCRIBE_TYPE":    7,
	"GENERATE_ID_TYPE":    8,
	"NANO_PAY_TYPE":       9,
	"ISSUE_ASSET_TYPE":    10,
}

func (PayloadType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{0}
}

type UnsignedTx struct {
	Payload    *Payload `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Nonce      uint64   `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Fee        int64    `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	Attributes []byte   `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *UnsignedTx) Reset()      { *m = UnsignedTx{} }
func (*UnsignedTx) ProtoMessage() {}
func (*UnsignedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{0}
}
func (m *UnsignedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnsignedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedTx.Merge(dst, src)
}
func (m *UnsignedTx) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedTx.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedTx proto.InternalMessageInfo

func (m *UnsignedTx) GetPayload() *Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UnsignedTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *UnsignedTx) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *UnsignedTx) GetAttributes() []byte {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Transaction struct {
	UnsignedTx *UnsignedTx `protobuf:"bytes,1,opt,name=unsigned_tx,json=unsignedTx" json:"unsigned_tx,omitempty"`
	Programs   []*Program  `protobuf:"bytes,2,rep,name=programs" json:"programs,omitempty"`
}

func (m *Transaction) Reset()      { *m = Transaction{} }
func (*Transaction) ProtoMessage() {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{1}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(dst, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetUnsignedTx() *UnsignedTx {
	if m != nil {
		return m.UnsignedTx
	}
	return nil
}

func (m *Transaction) GetPrograms() []*Program {
	if m != nil {
		return m.Programs
	}
	return nil
}

type Program struct {
	Code      []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Parameter []byte `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (m *Program) Reset()      { *m = Program{} }
func (*Program) ProtoMessage() {}
func (*Program) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{2}
}
func (m *Program) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Program) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Program.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Program) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Program.Merge(dst, src)
}
func (m *Program) XXX_Size() int {
	return m.Size()
}
func (m *Program) XXX_DiscardUnknown() {
	xxx_messageInfo_Program.DiscardUnknown(m)
}

var xxx_messageInfo_Program proto.InternalMessageInfo

func (m *Program) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *Program) GetParameter() []byte {
	if m != nil {
		return m.Parameter
	}
	return nil
}

type Payload struct {
	Type PayloadType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PayloadType" json:"type,omitempty"`
	Data []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Payload) Reset()      { *m = Payload{} }
func (*Payload) ProtoMessage() {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{3}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(dst, src)
}
func (m *Payload) XXX_Size() int {
	return m.Size()
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetType() PayloadType {
	if m != nil {
		return m.Type
	}
	return COINBASE_TYPE
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Coinbase struct {
	Sender    []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient []byte `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Coinbase) Reset()      { *m = Coinbase{} }
func (*Coinbase) ProtoMessage() {}
func (*Coinbase) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{4}
}
func (m *Coinbase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coinbase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coinbase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Coinbase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coinbase.Merge(dst, src)
}
func (m *Coinbase) XXX_Size() int {
	return m.Size()
}
func (m *Coinbase) XXX_DiscardUnknown() {
	xxx_messageInfo_Coinbase.DiscardUnknown(m)
}

var xxx_messageInfo_Coinbase proto.InternalMessageInfo

func (m *Coinbase) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Coinbase) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *Coinbase) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type SigChainTxn struct {
	SigChain  []byte `protobuf:"bytes,1,opt,name=sigChain,proto3" json:"sigChain,omitempty"`
	Submitter []byte `protobuf:"bytes,2,opt,name=submitter,proto3" json:"submitter,omitempty"`
}

func (m *SigChainTxn) Reset()      { *m = SigChainTxn{} }
func (*SigChainTxn) ProtoMessage() {}
func (*SigChainTxn) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{5}
}
func (m *SigChainTxn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigChainTxn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigChainTxn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SigChainTxn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigChainTxn.Merge(dst, src)
}
func (m *SigChainTxn) XXX_Size() int {
	return m.Size()
}
func (m *SigChainTxn) XXX_DiscardUnknown() {
	xxx_messageInfo_SigChainTxn.DiscardUnknown(m)
}

var xxx_messageInfo_SigChainTxn proto.InternalMessageInfo

func (m *SigChainTxn) GetSigChain() []byte {
	if m != nil {
		return m.SigChain
	}
	return nil
}

func (m *SigChainTxn) GetSubmitter() []byte {
	if m != nil {
		return m.Submitter
	}
	return nil
}

type RegisterName struct {
	Registrant      []byte `protobuf:"bytes,1,opt,name=registrant,proto3" json:"registrant,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RegistrationFee int64  `protobuf:"varint,3,opt,name=registration_fee,json=registrationFee,proto3" json:"registration_fee,omitempty"`
}

func (m *RegisterName) Reset()      { *m = RegisterName{} }
func (*RegisterName) ProtoMessage() {}
func (*RegisterName) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{6}
}
func (m *RegisterName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterName.Merge(dst, src)
}
func (m *RegisterName) XXX_Size() int {
	return m.Size()
}
func (m *RegisterName) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterName.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterName proto.InternalMessageInfo

func (m *RegisterName) GetRegistrant() []byte {
	if m != nil {
		return m.Registrant
	}
	return nil
}

func (m *RegisterName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterName) GetRegistrationFee() int64 {
	if m != nil {
		return m.RegistrationFee
	}
	return 0
}

type TransferName struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Registrant []byte `protobuf:"bytes,2,opt,name=registrant,proto3" json:"registrant,omitempty"`
	Recipient  []byte `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *TransferName) Reset()      { *m = TransferName{} }
func (*TransferName) ProtoMessage() {}
func (*TransferName) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{7}
}
func (m *TransferName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferName.Merge(dst, src)
}
func (m *TransferName) XXX_Size() int {
	return m.Size()
}
func (m *TransferName) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferName.DiscardUnknown(m)
}

var xxx_messageInfo_TransferName proto.InternalMessageInfo

func (m *TransferName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TransferName) GetRegistrant() []byte {
	if m != nil {
		return m.Registrant
	}
	return nil
}

func (m *TransferName) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

type DeleteName struct {
	Registrant []byte `protobuf:"bytes,1,opt,name=registrant,proto3" json:"registrant,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteName) Reset()      { *m = DeleteName{} }
func (*DeleteName) ProtoMessage() {}
func (*DeleteName) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{8}
}
func (m *DeleteName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteName.Merge(dst, src)
}
func (m *DeleteName) XXX_Size() int {
	return m.Size()
}
func (m *DeleteName) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteName.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteName proto.InternalMessageInfo

func (m *DeleteName) GetRegistrant() []byte {
	if m != nil {
		return m.Registrant
	}
	return nil
}

func (m *DeleteName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Subscribe struct {
	Subscriber []byte `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Topic      string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Bucket     uint32 `protobuf:"varint,4,opt,name=bucket,proto3" json:"bucket,omitempty"` // Deprecated: Do not use.
	Duration   uint32 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Meta       string `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *Subscribe) Reset()      { *m = Subscribe{} }
func (*Subscribe) ProtoMessage() {}
func (*Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{9}
}
func (m *Subscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscribe.Merge(dst, src)
}
func (m *Subscribe) XXX_Size() int {
	return m.Size()
}
func (m *Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Subscribe proto.InternalMessageInfo

func (m *Subscribe) GetSubscriber() []byte {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

func (m *Subscribe) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Subscribe) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// Deprecated: Do not use.
func (m *Subscribe) GetBucket() uint32 {
	if m != nil {
		return m.Bucket
	}
	return 0
}

func (m *Subscribe) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Subscribe) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

type Unsubscribe struct {
	Subscriber []byte `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Topic      string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *Unsubscribe) Reset()      { *m = Unsubscribe{} }
func (*Unsubscribe) ProtoMessage() {}
func (*Unsubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{10}
}
func (m *Unsubscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Unsubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Unsubscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Unsubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unsubscribe.Merge(dst, src)
}
func (m *Unsubscribe) XXX_Size() int {
	return m.Size()
}
func (m *Unsubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Unsubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Unsubscribe proto.InternalMessageInfo

func (m *Unsubscribe) GetSubscriber() []byte {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

func (m *Unsubscribe) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Unsubscribe) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type TransferAsset struct {
	Sender    []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient []byte `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *TransferAsset) Reset()      { *m = TransferAsset{} }
func (*TransferAsset) ProtoMessage() {}
func (*TransferAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{11}
}
func (m *TransferAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferAsset.Merge(dst, src)
}
func (m *TransferAsset) XXX_Size() int {
	return m.Size()
}
func (m *TransferAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferAsset.DiscardUnknown(m)
}

var xxx_messageInfo_TransferAsset proto.InternalMessageInfo

func (m *TransferAsset) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *TransferAsset) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *TransferAsset) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type GenerateID struct {
	PublicKey       []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	RegistrationFee int64  `protobuf:"varint,2,opt,name=registration_fee,json=registrationFee,proto3" json:"registration_fee,omitempty"`
}

func (m *GenerateID) Reset()      { *m = GenerateID{} }
func (*GenerateID) ProtoMessage() {}
func (*GenerateID) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{12}
}
func (m *GenerateID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GenerateID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateID.Merge(dst, src)
}
func (m *GenerateID) XXX_Size() int {
	return m.Size()
}
func (m *GenerateID) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateID.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateID proto.InternalMessageInfo

func (m *GenerateID) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *GenerateID) GetRegistrationFee() int64 {
	if m != nil {
		return m.RegistrationFee
	}
	return 0
}

type NanoPay struct {
	Sender            []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient         []byte `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Id                uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Amount            int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TxnExpiration     uint32 `protobuf:"varint,5,opt,name=txn_expiration,json=txnExpiration,proto3" json:"txn_expiration,omitempty"`
	NanoPayExpiration uint32 `protobuf:"varint,6,opt,name=nano_pay_expiration,json=nanoPayExpiration,proto3" json:"nano_pay_expiration,omitempty"`
}

func (m *NanoPay) Reset()      { *m = NanoPay{} }
func (*NanoPay) ProtoMessage() {}
func (*NanoPay) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{13}
}
func (m *NanoPay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NanoPay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NanoPay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NanoPay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NanoPay.Merge(dst, src)
}
func (m *NanoPay) XXX_Size() int {
	return m.Size()
}
func (m *NanoPay) XXX_DiscardUnknown() {
	xxx_messageInfo_NanoPay.DiscardUnknown(m)
}

var xxx_messageInfo_NanoPay proto.InternalMessageInfo

func (m *NanoPay) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *NanoPay) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *NanoPay) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NanoPay) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *NanoPay) GetTxnExpiration() uint32 {
	if m != nil {
		return m.TxnExpiration
	}
	return 0
}

func (m *NanoPay) GetNanoPayExpiration() uint32 {
	if m != nil {
		return m.NanoPayExpiration
	}
	return 0
}

type IssueAsset struct {
	Sender      []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol      string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TotalSupply int64  `protobuf:"varint,4,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	Precision   uint32 `protobuf:"varint,5,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (m *IssueAsset) Reset()      { *m = IssueAsset{} }
func (*IssueAsset) ProtoMessage() {}
func (*IssueAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_22cd33913c2900d0, []int{14}
}
func (m *IssueAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssueAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssueAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IssueAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueAsset.Merge(dst, src)
}
func (m *IssueAsset) XXX_Size() int {
	return m.Size()
}
func (m *IssueAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueAsset.DiscardUnknown(m)
}

var xxx_messageInfo_IssueAsset proto.InternalMessageInfo

func (m *IssueAsset) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *IssueAsset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IssueAsset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *IssueAsset) GetTotalSupply() int64 {
	if m != nil {
		return m.TotalSupply
	}
	return 0
}

func (m *IssueAsset) GetPrecision() uint32 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func init() {
	proto.RegisterType((*UnsignedTx)(nil), "pb.UnsignedTx")
	proto.RegisterType((*Transaction)(nil), "pb.Transaction")
	proto.RegisterType((*Program)(nil), "pb.Program")
	proto.RegisterType((*Payload)(nil), "pb.Payload")
	proto.RegisterType((*Coinbase)(nil), "pb.Coinbase")
	proto.RegisterType((*SigChainTxn)(nil), "pb.SigChainTxn")
	proto.RegisterType((*RegisterName)(nil), "pb.RegisterName")
	proto.RegisterType((*TransferName)(nil), "pb.TransferName")
	proto.RegisterType((*DeleteName)(nil), "pb.DeleteName")
	proto.RegisterType((*Subscribe)(nil), "pb.Subscribe")
	proto.RegisterType((*Unsubscribe)(nil), "pb.Unsubscribe")
	proto.RegisterType((*TransferAsset)(nil), "pb.TransferAsset")
	proto.RegisterType((*GenerateID)(nil), "pb.GenerateID")
	proto.RegisterType((*NanoPay)(nil), "pb.NanoPay")
	proto.RegisterType((*IssueAsset)(nil), "pb.IssueAsset")
	proto.RegisterEnum("pb.PayloadType", PayloadType_name, PayloadType_value)
}
func (x PayloadType) String() string {
	s, ok := PayloadType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UnsignedTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnsignedTx)
	if !ok {
		that2, ok := that.(UnsignedTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Payload.Equal(that1.Payload) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	if !bytes.Equal(this.Attributes, that1.Attributes) {
		return false
	}
	return true
}
func (this *Transaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transaction)
	if !ok {
		that2, ok := that.(Transaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UnsignedTx.Equal(that1.UnsignedTx) {
		return false
	}
	if len(this.Programs) != len(that1.Programs) {
		return false
	}
	for i := range this.Programs {
		if !this.Programs[i].Equal(that1.Programs[i]) {
			return false
		}
	}
	return true
}
func (this *Program) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Program)
	if !ok {
		that2, ok := that.(Program)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Code, that1.Code) {
		return false
	}
	if !bytes.Equal(this.Parameter, that1.Parameter) {
		return false
	}
	return true
}
func (this *Payload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Payload)
	if !ok {
		that2, ok := that.(Payload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Coinbase) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Coinbase)
	if !ok {
		that2, ok := that.(Coinbase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	if !bytes.Equal(this.Recipient, that1.Recipient) {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *SigChainTxn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SigChainTxn)
	if !ok {
		that2, ok := that.(SigChainTxn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SigChain, that1.SigChain) {
		return false
	}
	if !bytes.Equal(this.Submitter, that1.Submitter) {
		return false
	}
	return true
}
func (this *RegisterName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterName)
	if !ok {
		that2, ok := that.(RegisterName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Registrant, that1.Registrant) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.RegistrationFee != that1.RegistrationFee {
		return false
	}
	return true
}
func (this *TransferName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferName)
	if !ok {
		that2, ok := that.(TransferName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.Registrant, that1.Registrant) {
		return false
	}
	if !bytes.Equal(this.Recipient, that1.Recipient) {
		return false
	}
	return true
}
func (this *DeleteName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteName)
	if !ok {
		that2, ok := that.(DeleteName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Registrant, that1.Registrant) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Subscribe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subscribe)
	if !ok {
		that2, ok := that.(Subscribe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Subscriber, that1.Subscriber) {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if this.Bucket != that1.Bucket {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Meta != that1.Meta {
		return false
	}
	return true
}
func (this *Unsubscribe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Unsubscribe)
	if !ok {
		that2, ok := that.(Unsubscribe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Subscriber, that1.Subscriber) {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *TransferAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferAsset)
	if !ok {
		that2, ok := that.(TransferAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	if !bytes.Equal(this.Recipient, that1.Recipient) {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *GenerateID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateID)
	if !ok {
		that2, ok := that.(GenerateID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.RegistrationFee != that1.RegistrationFee {
		return false
	}
	return true
}
func (this *NanoPay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NanoPay)
	if !ok {
		that2, ok := that.(NanoPay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	if !bytes.Equal(this.Recipient, that1.Recipient) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.TxnExpiration != that1.TxnExpiration {
		return false
	}
	if this.NanoPayExpiration != that1.NanoPayExpiration {
		return false
	}
	return true
}
func (this *IssueAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IssueAsset)
	if !ok {
		that2, ok := that.(IssueAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.TotalSupply != that1.TotalSupply {
		return false
	}
	if this.Precision != that1.Precision {
		return false
	}
	return true
}
func (this *UnsignedTx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.UnsignedTx{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Transaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Transaction{")
	if this.UnsignedTx != nil {
		s = append(s, "UnsignedTx: "+fmt.Sprintf("%#v", this.UnsignedTx)+",\n")
	}
	if this.Programs != nil {
		s = append(s, "Programs: "+fmt.Sprintf("%#v", this.Programs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Program) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Program{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Parameter: "+fmt.Sprintf("%#v", this.Parameter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Payload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Payload{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Coinbase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Coinbase{")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SigChainTxn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SigChainTxn{")
	s = append(s, "SigChain: "+fmt.Sprintf("%#v", this.SigChain)+",\n")
	s = append(s, "Submitter: "+fmt.Sprintf("%#v", this.Submitter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RegisterName{")
	s = append(s, "Registrant: "+fmt.Sprintf("%#v", this.Registrant)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "RegistrationFee: "+fmt.Sprintf("%#v", this.RegistrationFee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TransferName{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Registrant: "+fmt.Sprintf("%#v", this.Registrant)+",\n")
	s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.DeleteName{")
	s = append(s, "Registrant: "+fmt.Sprintf("%#v", this.Registrant)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Subscribe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.Subscribe{")
	s = append(s, "Subscriber: "+fmt.Sprintf("%#v", this.Subscriber)+",\n")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "Bucket: "+fmt.Sprintf("%#v", this.Bucket)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Unsubscribe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Unsubscribe{")
	s = append(s, "Subscriber: "+fmt.Sprintf("%#v", this.Subscriber)+",\n")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferAsset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TransferAsset{")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GenerateID{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "RegistrationFee: "+fmt.Sprintf("%#v", this.RegistrationFee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NanoPay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.NanoPay{")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "TxnExpiration: "+fmt.Sprintf("%#v", this.TxnExpiration)+",\n")
	s = append(s, "NanoPayExpiration: "+fmt.Sprintf("%#v", this.NanoPayExpiration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IssueAsset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.IssueAsset{")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	s = append(s, "TotalSupply: "+fmt.Sprintf("%#v", this.TotalSupply)+",\n")
	s = append(s, "Precision: "+fmt.Sprintf("%#v", this.Precision)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTransaction(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UnsignedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedTx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Payload.Size()))
		n1, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Nonce))
	}
	if m.Fee != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Fee))
	}
	if len(m.Attributes) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Attributes)))
		i += copy(dAtA[i:], m.Attributes)
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnsignedTx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.UnsignedTx.Size()))
		n2, err := m.UnsignedTx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Programs) > 0 {
		for _, msg := range m.Programs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTransaction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Program) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Program) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Parameter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Parameter)))
		i += copy(dAtA[i:], m.Parameter)
	}
	return i, nil
}

func (m *Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Type))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Coinbase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coinbase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if len(m.Recipient) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Recipient)))
		i += copy(dAtA[i:], m.Recipient)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *SigChainTxn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigChainTxn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SigChain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.SigChain)))
		i += copy(dAtA[i:], m.SigChain)
	}
	if len(m.Submitter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Submitter)))
		i += copy(dAtA[i:], m.Submitter)
	}
	return i, nil
}

func (m *RegisterName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Registrant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Registrant)))
		i += copy(dAtA[i:], m.Registrant)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.RegistrationFee != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.RegistrationFee))
	}
	return i, nil
}

func (m *TransferName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Registrant) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Registrant)))
		i += copy(dAtA[i:], m.Registrant)
	}
	if len(m.Recipient) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Recipient)))
		i += copy(dAtA[i:], m.Recipient)
	}
	return i, nil
}

func (m *DeleteName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Registrant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Registrant)))
		i += copy(dAtA[i:], m.Registrant)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Subscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subscriber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Subscriber)))
		i += copy(dAtA[i:], m.Subscriber)
	}
	if len(m.Identifier) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Identifier)))
		i += copy(dAtA[i:], m.Identifier)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if m.Bucket != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Bucket))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Duration))
	}
	if len(m.Meta) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Meta)))
		i += copy(dAtA[i:], m.Meta)
	}
	return i, nil
}

func (m *Unsubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unsubscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subscriber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Subscriber)))
		i += copy(dAtA[i:], m.Subscriber)
	}
	if len(m.Identifier) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Identifier)))
		i += copy(dAtA[i:], m.Identifier)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	return i, nil
}

func (m *TransferAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferAsset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if len(m.Recipient) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Recipient)))
		i += copy(dAtA[i:], m.Recipient)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *GenerateID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if m.RegistrationFee != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.RegistrationFee))
	}
	return i, nil
}

func (m *NanoPay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NanoPay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if len(m.Recipient) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Recipient)))
		i += copy(dAtA[i:], m.Recipient)
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Id))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Amount))
	}
	if m.TxnExpiration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.TxnExpiration))
	}
	if m.NanoPayExpiration != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.NanoPayExpiration))
	}
	return i, nil
}

func (m *IssueAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssueAsset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Symbol) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if m.TotalSupply != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.TotalSupply))
	}
	if m.Precision != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Precision))
	}
	return i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUnsignedTx(r randyTransaction, easy bool) *UnsignedTx {
	this := &UnsignedTx{}
	if r.Intn(10) != 0 {
		this.Payload = NewPopulatedPayload(r, easy)
	}
	this.Nonce = uint64(uint64(r.Uint32()))
	this.Fee = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Fee *= -1
	}
	v1 := r.Intn(100)
	this.Attributes = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Attributes[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransaction(r randyTransaction, easy bool) *Transaction {
	this := &Transaction{}
	if r.Intn(10) != 0 {
		this.UnsignedTx = NewPopulatedUnsignedTx(r, easy)
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Programs = make([]*Program, v2)
		for i := 0; i < v2; i++ {
			this.Programs[i] = NewPopulatedProgram(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProgram(r randyTransaction, easy bool) *Program {
	this := &Program{}
	v3 := r.Intn(100)
	this.Code = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Code[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.Parameter = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Parameter[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPayload(r randyTransaction, easy bool) *Payload {
	this := &Payload{}
	this.Type = PayloadType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}[r.Intn(11)])
	v5 := r.Intn(100)
	this.Data = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCoinbase(r randyTransaction, easy bool) *Coinbase {
	this := &Coinbase{}
	v6 := r.Intn(100)
	this.Sender = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Sender[i] = byte(r.Intn(256))
	}
	v7 := r.Intn(100)
	this.Recipient = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Recipient[i] = byte(r.Intn(256))
	}
	this.Amount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Amount *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSigChainTxn(r randyTransaction, easy bool) *SigChainTxn {
	this := &SigChainTxn{}
	v8 := r.Intn(100)
	this.SigChain = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.SigChain[i] = byte(r.Intn(256))
	}
	v9 := r.Intn(100)
	this.Submitter = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Submitter[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRegisterName(r randyTransaction, easy bool) *RegisterName {
	this := &RegisterName{}
	v10 := r.Intn(100)
	this.Registrant = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Registrant[i] = byte(r.Intn(256))
	}
	this.Name = string(randStringTransaction(r))
	this.RegistrationFee = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.RegistrationFee *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransferName(r randyTransaction, easy bool) *TransferName {
	this := &TransferName{}
	this.Name = string(randStringTransaction(r))
	v11 := r.Intn(100)
	this.Registrant = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.Registrant[i] = byte(r.Intn(256))
	}
	v12 := r.Intn(100)
	this.Recipient = make([]byte, v12)
	for i := 0; i < v12; i++ {
		this.Recipient[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteName(r randyTransaction, easy bool) *DeleteName {
	this := &DeleteName{}
	v13 := r.Intn(100)
	this.Registrant = make([]byte, v13)
	for i := 0; i < v13; i++ {
		this.Registrant[i] = byte(r.Intn(256))
	}
	this.Name = string(randStringTransaction(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubscribe(r randyTransaction, easy bool) *Subscribe {
	this := &Subscribe{}
	v14 := r.Intn(100)
	this.Subscriber = make([]byte, v14)
	for i := 0; i < v14; i++ {
		this.Subscriber[i] = byte(r.Intn(256))
	}
	this.Identifier = string(randStringTransaction(r))
	this.Topic = string(randStringTransaction(r))
	this.Bucket = uint32(r.Uint32())
	this.Duration = uint32(r.Uint32())
	this.Meta = string(randStringTransaction(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUnsubscribe(r randyTransaction, easy bool) *Unsubscribe {
	this := &Unsubscribe{}
	v15 := r.Intn(100)
	this.Subscriber = make([]byte, v15)
	for i := 0; i < v15; i++ {
		this.Subscriber[i] = byte(r.Intn(256))
	}
	this.Identifier = string(randStringTransaction(r))
	this.Topic = string(randStringTransaction(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransferAsset(r randyTransaction, easy bool) *TransferAsset {
	this := &TransferAsset{}
	v16 := r.Intn(100)
	this.Sender = make([]byte, v16)
	for i := 0; i < v16; i++ {
		this.Sender[i] = byte(r.Intn(256))
	}
	v17 := r.Intn(100)
	this.Recipient = make([]byte, v17)
	for i := 0; i < v17; i++ {
		this.Recipient[i] = byte(r.Intn(256))
	}
	this.Amount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Amount *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGenerateID(r randyTransaction, easy bool) *GenerateID {
	this := &GenerateID{}
	v18 := r.Intn(100)
	this.PublicKey = make([]byte, v18)
	for i := 0; i < v18; i++ {
		this.PublicKey[i] = byte(r.Intn(256))
	}
	this.RegistrationFee = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.RegistrationFee *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNanoPay(r randyTransaction, easy bool) *NanoPay {
	this := &NanoPay{}
	v19 := r.Intn(100)
	this.Sender = make([]byte, v19)
	for i := 0; i < v19; i++ {
		this.Sender[i] = byte(r.Intn(256))
	}
	v20 := r.Intn(100)
	this.Recipient = make([]byte, v20)
	for i := 0; i < v20; i++ {
		this.Recipient[i] = byte(r.Intn(256))
	}
	this.Id = uint64(uint64(r.Uint32()))
	this.Amount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Amount *= -1
	}
	this.TxnExpiration = uint32(r.Uint32())
	this.NanoPayExpiration = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIssueAsset(r randyTransaction, easy bool) *IssueAsset {
	this := &IssueAsset{}
	v21 := r.Intn(100)
	this.Sender = make([]byte, v21)
	for i := 0; i < v21; i++ {
		this.Sender[i] = byte(r.Intn(256))
	}
	this.Name = string(randStringTransaction(r))
	this.Symbol = string(randStringTransaction(r))
	this.TotalSupply = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TotalSupply *= -1
	}
	this.Precision = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTransaction interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTransaction(r randyTransaction) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTransaction(r randyTransaction) string {
	v22 := r.Intn(100)
	tmps := make([]rune, v22)
	for i := 0; i < v22; i++ {
		tmps[i] = randUTF8RuneTransaction(r)
	}
	return string(tmps)
}
func randUnrecognizedTransaction(r randyTransaction, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTransaction(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTransaction(dAtA []byte, r randyTransaction, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTransaction(dAtA, uint64(key))
		v23 := r.Int63()
		if r.Intn(2) == 0 {
			v23 *= -1
		}
		dAtA = encodeVarintPopulateTransaction(dAtA, uint64(v23))
	case 1:
		dAtA = encodeVarintPopulateTransaction(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTransaction(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTransaction(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTransaction(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTransaction(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UnsignedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTransaction(uint64(m.Nonce))
	}
	if m.Fee != 0 {
		n += 1 + sovTransaction(uint64(m.Fee))
	}
	l = len(m.Attributes)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsignedTx != nil {
		l = m.UnsignedTx.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	return n
}

func (m *Program) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTransaction(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *Coinbase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTransaction(uint64(m.Amount))
	}
	return n
}

func (m *SigChainTxn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SigChain)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *RegisterName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Registrant)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.RegistrationFee != 0 {
		n += 1 + sovTransaction(uint64(m.RegistrationFee))
	}
	return n
}

func (m *TransferName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Registrant)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *DeleteName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Registrant)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *Subscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Bucket != 0 {
		n += 1 + sovTransaction(uint64(m.Bucket))
	}
	if m.Duration != 0 {
		n += 1 + sovTransaction(uint64(m.Duration))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *Unsubscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *TransferAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTransaction(uint64(m.Amount))
	}
	return n
}

func (m *GenerateID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.RegistrationFee != 0 {
		n += 1 + sovTransaction(uint64(m.RegistrationFee))
	}
	return n
}

func (m *NanoPay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTransaction(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 1 + sovTransaction(uint64(m.Amount))
	}
	if m.TxnExpiration != 0 {
		n += 1 + sovTransaction(uint64(m.TxnExpiration))
	}
	if m.NanoPayExpiration != 0 {
		n += 1 + sovTransaction(uint64(m.NanoPayExpiration))
	}
	return n
}

func (m *IssueAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.TotalSupply != 0 {
		n += 1 + sovTransaction(uint64(m.TotalSupply))
	}
	if m.Precision != 0 {
		n += 1 + sovTransaction(uint64(m.Precision))
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UnsignedTx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnsignedTx{`,
		`Payload:` + strings.Replace(fmt.Sprintf("%v", this.Payload), "Payload", "Payload", 1) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Transaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transaction{`,
		`UnsignedTx:` + strings.Replace(fmt.Sprintf("%v", this.UnsignedTx), "UnsignedTx", "UnsignedTx", 1) + `,`,
		`Programs:` + strings.Replace(fmt.Sprintf("%v", this.Programs), "Program", "Program", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Program) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Program{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Parameter:` + fmt.Sprintf("%v", this.Parameter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Payload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Payload{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Coinbase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Coinbase{`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Recipient:` + fmt.Sprintf("%v", this.Recipient) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SigChainTxn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SigChainTxn{`,
		`SigChain:` + fmt.Sprintf("%v", this.SigChain) + `,`,
		`Submitter:` + fmt.Sprintf("%v", this.Submitter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterName{`,
		`Registrant:` + fmt.Sprintf("%v", this.Registrant) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`RegistrationFee:` + fmt.Sprintf("%v", this.RegistrationFee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferName{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Registrant:` + fmt.Sprintf("%v", this.Registrant) + `,`,
		`Recipient:` + fmt.Sprintf("%v", this.Recipient) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteName{`,
		`Registrant:` + fmt.Sprintf("%v", this.Registrant) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Subscribe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Subscribe{`,
		`Subscriber:` + fmt.Sprintf("%v", this.Subscriber) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Unsubscribe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Unsubscribe{`,
		`Subscriber:` + fmt.Sprintf("%v", this.Subscriber) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferAsset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferAsset{`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Recipient:` + fmt.Sprintf("%v", this.Recipient) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateID{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`RegistrationFee:` + fmt.Sprintf("%v", this.RegistrationFee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NanoPay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NanoPay{`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Recipient:` + fmt.Sprintf("%v", this.Recipient) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`TxnExpiration:` + fmt.Sprintf("%v", this.TxnExpiration) + `,`,
		`NanoPayExpiration:` + fmt.Sprintf("%v", this.NanoPayExpiration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IssueAsset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IssueAsset{`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`TotalSupply:` + fmt.Sprintf("%v", this.TotalSupply) + `,`,
		`Precision:` + fmt.Sprintf("%v", this.Precision) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTransaction(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UnsignedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsignedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsignedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &Payload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes[:0], dAtA[iNdEx:postIndex]...)
			if m.Attributes == nil {
				m.Attributes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsignedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnsignedTx == nil {
				m.UnsignedTx = &UnsignedTx{}
			}
			if err := m.UnsignedTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, &Program{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Program) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Program: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Program: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = append(m.Parameter[:0], dAtA[iNdEx:postIndex]...)
			if m.Parameter == nil {
				m.Parameter = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PayloadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coinbase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coinbase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coinbase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigChainTxn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigChainTxn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigChainTxn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigChain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigChain = append(m.SigChain[:0], dAtA[iNdEx:postIndex]...)
			if m.SigChain == nil {
				m.SigChain = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrant = append(m.Registrant[:0], dAtA[iNdEx:postIndex]...)
			if m.Registrant == nil {
				m.Registrant = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationFee", wireType)
			}
			m.RegistrationFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationFee |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrant = append(m.Registrant[:0], dAtA[iNdEx:postIndex]...)
			if m.Registrant == nil {
				m.Registrant = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrant = append(m.Registrant[:0], dAtA[iNdEx:postIndex]...)
			if m.Registrant == nil {
				m.Registrant = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = append(m.Subscriber[:0], dAtA[iNdEx:postIndex]...)
			if m.Subscriber == nil {
				m.Subscriber = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			m.Bucket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bucket |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unsubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unsubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unsubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = append(m.Subscriber[:0], dAtA[iNdEx:postIndex]...)
			if m.Subscriber == nil {
				m.Subscriber = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationFee", wireType)
			}
			m.RegistrationFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationFee |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NanoPay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NanoPay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NanoPay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnExpiration", wireType)
			}
			m.TxnExpiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxnExpiration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NanoPayExpiration", wireType)
			}
			m.NanoPayExpiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NanoPayExpiration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssueAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			m.TotalSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSupply |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precision", wireType)
			}
			m.Precision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Precision |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransaction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransaction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/transaction.proto", fileDescriptor_transaction_22cd33913c2900d0) }

var fileDescriptor_transaction_22cd33913c2900d0 = []byte{
	// 929 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0x4e, 0x36, 0x6d, 0x5e, 0xd2, 0x6e, 0x77, 0xb6, 0x5a, 0xa2, 0x0a, 0xac, 0x62,
	0xb4, 0xa2, 0x20, 0xd1, 0x4a, 0xcb, 0x11, 0x0e, 0x24, 0xad, 0xb7, 0x44, 0x80, 0xb7, 0x1a, 0xbb,
	0x68, 0xf7, 0x80, 0xcc, 0xd8, 0x99, 0x66, 0x47, 0x1b, 0x8f, 0x2d, 0x7b, 0x2c, 0x25, 0xe2, 0xb2,
	0x1f, 0x01, 0xbe, 0x05, 0x17, 0xee, 0x9c, 0x38, 0x73, 0xec, 0x71, 0x8f, 0x34, 0xbd, 0x70, 0xdc,
	0x23, 0x47, 0x34, 0xe3, 0x49, 0xe2, 0x2e, 0x15, 0x87, 0x15, 0xdc, 0xe6, 0xff, 0x7b, 0xcf, 0xcf,
	0xff, 0xf7, 0xde, 0x38, 0x81, 0xdd, 0x2c, 0x3a, 0x92, 0x39, 0x15, 0x05, 0x8d, 0x25, 0x4f, 0xc5,
	0x61, 0x96, 0xa7, 0x32, 0xc5, 0x56, 0x16, 0xed, 0x7d, 0x32, 0xe1, 0xf2, 0x79, 0x19, 0x1d, 0xc6,
	0x69, 0x72, 0x34, 0x49, 0x27, 0xe9, 0x91, 0x0e, 0x45, 0xe5, 0x85, 0x56, 0x5a, 0xe8, 0x53, 0xf5,
	0x88, 0xf3, 0x03, 0xc0, 0xb9, 0x28, 0xf8, 0x44, 0xb0, 0x71, 0x30, 0xc3, 0x0f, 0x61, 0x23, 0xa3,
	0xf3, 0x69, 0x4a, 0xc7, 0x7d, 0xb4, 0x8f, 0x0e, 0xba, 0x8f, 0xba, 0x87, 0x59, 0x74, 0x78, 0x56,
	0x21, 0xb2, 0x8c, 0xe1, 0x5d, 0xb8, 0x23, 0x52, 0x11, 0xb3, 0xbe, 0xb5, 0x8f, 0x0e, 0x5a, 0xa4,
	0x12, 0x78, 0x07, 0x9a, 0x17, 0x8c, 0xf5, 0x9b, 0xfb, 0xe8, 0xa0, 0x49, 0xd4, 0x11, 0xdb, 0x00,
	0x54, 0xca, 0x9c, 0x47, 0xa5, 0x64, 0x45, 0xbf, 0xb5, 0x8f, 0x0e, 0x7a, 0xa4, 0x46, 0x9c, 0x09,
	0x74, 0x83, 0x75, 0x13, 0xf8, 0x08, 0xba, 0xa5, 0xf1, 0x12, 0xca, 0x99, 0x71, 0xb0, 0xad, 0x1c,
	0xac, 0x2d, 0x12, 0x28, 0xd7, 0x76, 0x3f, 0x84, 0xcd, 0x2c, 0x4f, 0x27, 0x39, 0x4d, 0x8a, 0xbe,
	0xb5, 0xdf, 0x5c, 0xf9, 0xad, 0x18, 0x59, 0x05, 0x9d, 0xcf, 0x60, 0xc3, 0x40, 0x8c, 0xa1, 0x15,
	0xa7, 0x63, 0xa6, 0xab, 0xf7, 0x88, 0x3e, 0xe3, 0x77, 0xa1, 0x93, 0xd1, 0x9c, 0x26, 0x4c, 0xb2,
	0x5c, 0xf7, 0xd4, 0x23, 0x6b, 0xe0, 0x0c, 0x61, 0xc3, 0x4c, 0x00, 0x7f, 0x00, 0x2d, 0x39, 0xcf,
	0xaa, 0x87, 0xb7, 0x1f, 0xdd, 0xad, 0x0d, 0x27, 0x98, 0x67, 0x8c, 0xe8, 0xa0, 0x7a, 0xc3, 0x98,
	0x4a, 0x6a, 0x0a, 0xe9, 0xb3, 0xf3, 0x14, 0x36, 0x8f, 0x53, 0x2e, 0x22, 0x5a, 0x30, 0xfc, 0x00,
	0xda, 0x05, 0x13, 0x63, 0x96, 0x1b, 0x0f, 0x46, 0x29, 0x17, 0x39, 0x8b, 0x79, 0xc6, 0x99, 0x90,
	0x4b, 0x17, 0x2b, 0xa0, 0x9e, 0xa2, 0x49, 0x5a, 0x0a, 0x69, 0x06, 0x6c, 0x94, 0x73, 0x0a, 0x5d,
	0x9f, 0x4f, 0x8e, 0x9f, 0x53, 0x2e, 0x82, 0x99, 0xc0, 0x7b, 0xb0, 0x59, 0x18, 0x69, 0xca, 0xaf,
	0xb4, 0x7a, 0x41, 0x51, 0x46, 0x09, 0x97, 0xb5, 0x36, 0x57, 0xc0, 0x49, 0xa0, 0x47, 0xd8, 0x84,
	0x17, 0x92, 0xe5, 0x1e, 0x4d, 0xf4, 0xf2, 0x72, 0xad, 0x73, 0x2a, 0xa4, 0xa9, 0x55, 0x23, 0xaa,
	0x4d, 0x41, 0x93, 0xea, 0x0e, 0x74, 0x88, 0x3e, 0xe3, 0x8f, 0x60, 0x67, 0x99, 0xa1, 0x36, 0x1a,
	0xae, 0xef, 0xc3, 0xdd, 0x3a, 0x7f, 0xcc, 0x98, 0xf3, 0x3d, 0xf4, 0xf4, 0xee, 0x2f, 0xcc, 0xeb,
	0x96, 0xe5, 0x50, 0xad, 0xdc, 0x4d, 0x0b, 0xd6, 0x3f, 0x2c, 0xdc, 0x98, 0x58, 0xf3, 0x8d, 0x89,
	0x39, 0x5f, 0x00, 0x9c, 0xb0, 0x29, 0x93, 0xec, 0x6d, 0xdb, 0x71, 0x7e, 0x41, 0xd0, 0xf1, 0xcb,
	0xa8, 0x88, 0x73, 0x1e, 0xe9, 0x0a, 0xc5, 0x52, 0x2c, 0x77, 0x57, 0x23, 0x2a, 0xce, 0xc7, 0x4c,
	0x48, 0x7e, 0xc1, 0xcd, 0x7c, 0x3b, 0xa4, 0x46, 0xd4, 0x57, 0x23, 0xd3, 0x8c, 0xc7, 0xda, 0x69,
	0x87, 0x54, 0x02, 0xef, 0x41, 0x3b, 0x2a, 0xe3, 0x17, 0x4c, 0xea, 0xef, 0x63, 0x6b, 0x68, 0xf5,
	0x11, 0x31, 0x44, 0x2d, 0x73, 0x5c, 0x56, 0x23, 0xeb, 0xdf, 0x51, 0x51, 0xb2, 0xd2, 0xca, 0x6f,
	0xc2, 0x24, 0xed, 0xb7, 0x2b, 0xbf, 0xea, 0xec, 0xc4, 0xd0, 0x3d, 0x17, 0xc5, 0xff, 0x6b, 0xd8,
	0xf9, 0x0e, 0xb6, 0x96, 0x8b, 0x1b, 0x14, 0x05, 0x93, 0xff, 0xf1, 0x7d, 0xfe, 0x16, 0xe0, 0x94,
	0x09, 0x96, 0x53, 0xc9, 0x46, 0x27, 0xf8, 0x3d, 0x80, 0xac, 0x8c, 0xa6, 0x3c, 0x0e, 0x5f, 0xb0,
	0xb9, 0xa9, 0xdf, 0xa9, 0xc8, 0x57, 0x6c, 0x7e, 0xeb, 0x7d, 0xb3, 0x6e, 0xbf, 0x6f, 0xbf, 0x21,
	0xd8, 0xf0, 0xa8, 0x48, 0xcf, 0xe8, 0xfc, 0x2d, 0x1d, 0x6f, 0x83, 0xc5, 0xc7, 0xda, 0x6d, 0x8b,
	0x58, 0x7c, 0x5c, 0xeb, 0xa0, 0x55, 0xef, 0x00, 0x3f, 0x84, 0x6d, 0x39, 0x13, 0x21, 0x9b, 0x65,
	0xfc, 0xc6, 0xee, 0xb6, 0xe4, 0x4c, 0xb8, 0x2b, 0x88, 0x0f, 0xe1, 0xbe, 0xa0, 0x22, 0x0d, 0x33,
	0x3a, 0xaf, 0xe7, 0xb6, 0x75, 0xee, 0x3d, 0x51, 0x59, 0x5d, 0xe7, 0x3b, 0x3f, 0x21, 0x80, 0x51,
	0x51, 0x94, 0xec, 0xdf, 0xa7, 0x7e, 0xdb, 0x67, 0xa9, 0x72, 0xe7, 0x49, 0x94, 0x4e, 0xcd, 0x26,
	0x8d, 0xc2, 0xef, 0x43, 0x4f, 0xa6, 0x92, 0x4e, 0xc3, 0xa2, 0xcc, 0xb2, 0xe9, 0xdc, 0xf4, 0xd1,
	0xd5, 0xcc, 0xd7, 0x48, 0xff, 0x34, 0xaa, 0x11, 0x14, 0xeb, 0x3e, 0xd6, 0xe0, 0xe3, 0x97, 0x16,
	0x74, 0x6b, 0x3f, 0x80, 0xf8, 0x1e, 0x6c, 0x1d, 0x3f, 0x19, 0x79, 0xc3, 0x81, 0xef, 0x86, 0xc1,
	0xb3, 0x33, 0x77, 0xa7, 0x81, 0xdf, 0x81, 0xfb, 0x01, 0x19, 0x78, 0xfe, 0x63, 0x97, 0x84, 0x03,
	0xdf, 0x77, 0x83, 0x2a, 0x80, 0xf0, 0x03, 0xc0, 0xfe, 0xe8, 0x34, 0x3c, 0xfe, 0x72, 0x30, 0xf2,
	0xc2, 0xe0, 0xa9, 0x57, 0x71, 0x4b, 0x71, 0xe2, 0x9e, 0x8e, 0xfc, 0xc0, 0x25, 0xa1, 0x37, 0xf8,
	0xc6, 0x14, 0x6a, 0x2a, 0xbe, 0x2a, 0xb4, 0xe6, 0x2d, 0xbc, 0x0b, 0x3b, 0x27, 0xee, 0xd7, 0x6e,
	0xe0, 0xd6, 0xe8, 0x1d, 0x8c, 0x61, 0xdb, 0x3f, 0x1f, 0xfa, 0xc7, 0x64, 0x34, 0x34, 0xac, 0xad,
	0x32, 0xcf, 0xbd, 0x37, 0xe8, 0x86, 0xa2, 0xa7, 0xae, 0xe7, 0x92, 0x41, 0xe0, 0x86, 0xa3, 0x93,
	0x8a, 0x6e, 0xaa, 0x4e, 0xbc, 0x81, 0xf7, 0x24, 0x3c, 0x1b, 0x3c, 0xab, 0x50, 0x47, 0x25, 0x8e,
	0x7c, 0xff, 0xdc, 0xad, 0xb7, 0x01, 0xc3, 0xcf, 0x2f, 0xaf, 0xec, 0xc6, 0xab, 0x2b, 0xbb, 0xf1,
	0xfa, 0xca, 0x46, 0x7f, 0x5d, 0xd9, 0xe8, 0xe5, 0xc2, 0x46, 0x3f, 0x2f, 0x6c, 0xf4, 0xeb, 0xc2,
	0x46, 0xbf, 0x2f, 0x6c, 0x74, 0xb9, 0xb0, 0xd1, 0x1f, 0x0b, 0x1b, 0xfd, 0xb9, 0xb0, 0x1b, 0xaf,
	0x17, 0x36, 0xfa, 0xf1, 0xda, 0x6e, 0x5c, 0x5e, 0xdb, 0x8d, 0x57, 0xd7, 0x76, 0x23, 0x6a, 0xeb,
	0x7f, 0xe1, 0x4f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x64, 0xa4, 0x3d, 0x14, 0xd0, 0x07, 0x00,
	0x00,
}
