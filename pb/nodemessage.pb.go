// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/nodemessage.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import por "github.com/nknorg/nkn/por"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE MessageType = 0
	VOTE                                MessageType = 1
	I_HAVE_BLOCK_PROPOSAL               MessageType = 2
	REQUEST_BLOCK_PROPOSAL              MessageType = 3
	REQUEST_BLOCK_PROPOSAL_REPLY        MessageType = 4
	GET_CONSENSUS_STATE                 MessageType = 5
	GET_CONSENSUS_STATE_REPLY           MessageType = 6
	GET_BLOCK_HEADERS                   MessageType = 7
	GET_BLOCK_HEADERS_REPLY             MessageType = 8
	GET_BLOCKS                          MessageType = 9
	GET_BLOCKS_REPLY                    MessageType = 10
	RELAY                               MessageType = 11
	TRANSACTIONS                        MessageType = 12
)

var MessageType_name = map[int32]string{
	0:  "MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE",
	1:  "VOTE",
	2:  "I_HAVE_BLOCK_PROPOSAL",
	3:  "REQUEST_BLOCK_PROPOSAL",
	4:  "REQUEST_BLOCK_PROPOSAL_REPLY",
	5:  "GET_CONSENSUS_STATE",
	6:  "GET_CONSENSUS_STATE_REPLY",
	7:  "GET_BLOCK_HEADERS",
	8:  "GET_BLOCK_HEADERS_REPLY",
	9:  "GET_BLOCKS",
	10: "GET_BLOCKS_REPLY",
	11: "RELAY",
	12: "TRANSACTIONS",
}
var MessageType_value = map[string]int32{
	"MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE": 0,
	"VOTE":                         1,
	"I_HAVE_BLOCK_PROPOSAL":        2,
	"REQUEST_BLOCK_PROPOSAL":       3,
	"REQUEST_BLOCK_PROPOSAL_REPLY": 4,
	"GET_CONSENSUS_STATE":          5,
	"GET_CONSENSUS_STATE_REPLY":    6,
	"GET_BLOCK_HEADERS":            7,
	"GET_BLOCK_HEADERS_REPLY":      8,
	"GET_BLOCKS":                   9,
	"GET_BLOCKS_REPLY":             10,
	"RELAY":                        11,
	"TRANSACTIONS":                 12,
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{0}
}

// Message type that can be signed message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedSignedMessageType int32

const (
	ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE    AllowedSignedMessageType = 0
	ALLOW_SIGNED_VOTE                      AllowedSignedMessageType = 1
	ALLOW_SIGNED_I_HAVE_BLOCK_PROPOSAL     AllowedSignedMessageType = 2
	ALLOW_SIGNED_REQUEST_BLOCK_PROPOSAL    AllowedSignedMessageType = 3
	ALLOW_SIGNED_GET_CONSENSUS_STATE       AllowedSignedMessageType = 5
	ALLOW_SIGNED_GET_CONSENSUS_STATE_REPLY AllowedSignedMessageType = 6
	ALLOW_SIGNED_GET_BLOCK_HEADERS         AllowedSignedMessageType = 7
	ALLOW_SIGNED_GET_BLOCKS                AllowedSignedMessageType = 9
)

var AllowedSignedMessageType_name = map[int32]string{
	0: "ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE",
	1: "ALLOW_SIGNED_VOTE",
	2: "ALLOW_SIGNED_I_HAVE_BLOCK_PROPOSAL",
	3: "ALLOW_SIGNED_REQUEST_BLOCK_PROPOSAL",
	5: "ALLOW_SIGNED_GET_CONSENSUS_STATE",
	6: "ALLOW_SIGNED_GET_CONSENSUS_STATE_REPLY",
	7: "ALLOW_SIGNED_GET_BLOCK_HEADERS",
	9: "ALLOW_SIGNED_GET_BLOCKS",
}
var AllowedSignedMessageType_value = map[string]int32{
	"ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE":    0,
	"ALLOW_SIGNED_VOTE":                      1,
	"ALLOW_SIGNED_I_HAVE_BLOCK_PROPOSAL":     2,
	"ALLOW_SIGNED_REQUEST_BLOCK_PROPOSAL":    3,
	"ALLOW_SIGNED_GET_CONSENSUS_STATE":       5,
	"ALLOW_SIGNED_GET_CONSENSUS_STATE_REPLY": 6,
	"ALLOW_SIGNED_GET_BLOCK_HEADERS":         7,
	"ALLOW_SIGNED_GET_BLOCKS":                9,
}

func (AllowedSignedMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{1}
}

// Message type that can be unsigned message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedUnsignedMessageType int32

const (
	ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE  AllowedUnsignedMessageType = 0
	ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY     AllowedUnsignedMessageType = 4
	ALLOW_UNSIGNED_GET_BLOCK_HEADERS_REPLY AllowedUnsignedMessageType = 8
	ALLOW_UNSIGNED_GET_BLOCKS_REPLY        AllowedUnsignedMessageType = 10
	ALLOW_UNSIGNED_RELAY                   AllowedUnsignedMessageType = 11
	ALLOW_UNSIGNED_TRANSACTIONS            AllowedUnsignedMessageType = 12
)

var AllowedUnsignedMessageType_name = map[int32]string{
	0:  "ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE",
	4:  "ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY",
	8:  "ALLOW_UNSIGNED_GET_BLOCK_HEADERS_REPLY",
	10: "ALLOW_UNSIGNED_GET_BLOCKS_REPLY",
	11: "ALLOW_UNSIGNED_RELAY",
	12: "ALLOW_UNSIGNED_TRANSACTIONS",
}
var AllowedUnsignedMessageType_value = map[string]int32{
	"ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE":  0,
	"ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY":     4,
	"ALLOW_UNSIGNED_GET_BLOCK_HEADERS_REPLY": 8,
	"ALLOW_UNSIGNED_GET_BLOCKS_REPLY":        10,
	"ALLOW_UNSIGNED_RELAY":                   11,
	"ALLOW_UNSIGNED_TRANSACTIONS":            12,
}

func (AllowedUnsignedMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{2}
}

// Message type that can be sent as direct message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedDirectMessageType int32

const (
	ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE    AllowedDirectMessageType = 0
	ALLOW_DIRECT_VOTE                      AllowedDirectMessageType = 1
	ALLOW_DIRECT_I_HAVE_BLOCK_PROPOSAL     AllowedDirectMessageType = 2
	ALLOW_DIRECT_REQUEST_BLOCK_PROPOSAL    AllowedDirectMessageType = 3
	ALLOW_DIRECT_REQUEST_BLOCK_REPLY       AllowedDirectMessageType = 4
	ALLOW_DIRECT_GET_CONSENSUS_STATE       AllowedDirectMessageType = 5
	ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY AllowedDirectMessageType = 6
	ALLOW_DIRECT_GET_BLOCK_HEADERS         AllowedDirectMessageType = 7
	ALLOW_DIRECT_GET_BLOCK_HEADERS_REPLY   AllowedDirectMessageType = 8
	ALLOW_DIRECT_GET_BLOCKS                AllowedDirectMessageType = 9
	ALLOW_DIRECT_GET_BLOCKS_REPLY          AllowedDirectMessageType = 10
)

var AllowedDirectMessageType_name = map[int32]string{
	0:  "ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE",
	1:  "ALLOW_DIRECT_VOTE",
	2:  "ALLOW_DIRECT_I_HAVE_BLOCK_PROPOSAL",
	3:  "ALLOW_DIRECT_REQUEST_BLOCK_PROPOSAL",
	4:  "ALLOW_DIRECT_REQUEST_BLOCK_REPLY",
	5:  "ALLOW_DIRECT_GET_CONSENSUS_STATE",
	6:  "ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY",
	7:  "ALLOW_DIRECT_GET_BLOCK_HEADERS",
	8:  "ALLOW_DIRECT_GET_BLOCK_HEADERS_REPLY",
	9:  "ALLOW_DIRECT_GET_BLOCKS",
	10: "ALLOW_DIRECT_GET_BLOCKS_REPLY",
}
var AllowedDirectMessageType_value = map[string]int32{
	"ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE":    0,
	"ALLOW_DIRECT_VOTE":                      1,
	"ALLOW_DIRECT_I_HAVE_BLOCK_PROPOSAL":     2,
	"ALLOW_DIRECT_REQUEST_BLOCK_PROPOSAL":    3,
	"ALLOW_DIRECT_REQUEST_BLOCK_REPLY":       4,
	"ALLOW_DIRECT_GET_CONSENSUS_STATE":       5,
	"ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY": 6,
	"ALLOW_DIRECT_GET_BLOCK_HEADERS":         7,
	"ALLOW_DIRECT_GET_BLOCK_HEADERS_REPLY":   8,
	"ALLOW_DIRECT_GET_BLOCKS":                9,
	"ALLOW_DIRECT_GET_BLOCKS_REPLY":          10,
}

func (AllowedDirectMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{3}
}

// Message type that can be sent as relay message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedRelayMessageType int32

const (
	ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE AllowedRelayMessageType = 0
	ALLOW_RELAY_RELAY                  AllowedRelayMessageType = 11
)

var AllowedRelayMessageType_name = map[int32]string{
	0:  "ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE",
	11: "ALLOW_RELAY_RELAY",
}
var AllowedRelayMessageType_value = map[string]int32{
	"ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE": 0,
	"ALLOW_RELAY_RELAY":                  11,
}

func (AllowedRelayMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{4}
}

// Message type that can be sent as broadcast_push message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedBroadcastPushMessageType int32

const (
	ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE AllowedBroadcastPushMessageType = 0
	ALLOW_BROADCAST_PUSH_TRANSACTIONS           AllowedBroadcastPushMessageType = 12
)

var AllowedBroadcastPushMessageType_name = map[int32]string{
	0:  "ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE",
	12: "ALLOW_BROADCAST_PUSH_TRANSACTIONS",
}
var AllowedBroadcastPushMessageType_value = map[string]int32{
	"ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE": 0,
	"ALLOW_BROADCAST_PUSH_TRANSACTIONS":           12,
}

func (AllowedBroadcastPushMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{5}
}

// Message type that can be sent as broadcast_pull message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedBroadcastPullMessageType int32

const (
	ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE AllowedBroadcastPullMessageType = 0
)

var AllowedBroadcastPullMessageType_name = map[int32]string{
	0: "ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE",
}
var AllowedBroadcastPullMessageType_value = map[string]int32{
	"ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE": 0,
}

func (AllowedBroadcastPullMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{6}
}

// Message type that can be sent as broadcast_tree message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedBroadcastTreeMessageType int32

const (
	ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE AllowedBroadcastTreeMessageType = 0
	ALLOW_BROADCAST_TREE_TRANSACTIONS           AllowedBroadcastTreeMessageType = 12
)

var AllowedBroadcastTreeMessageType_name = map[int32]string{
	0:  "ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE",
	12: "ALLOW_BROADCAST_TREE_TRANSACTIONS",
}
var AllowedBroadcastTreeMessageType_value = map[string]int32{
	"ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE": 0,
	"ALLOW_BROADCAST_TREE_TRANSACTIONS":           12,
}

func (AllowedBroadcastTreeMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{7}
}

type UnsignedMessage struct {
	MessageType MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=pb.MessageType" json:"message_type,omitempty"`
	Message     []byte      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UnsignedMessage) Reset()      { *m = UnsignedMessage{} }
func (*UnsignedMessage) ProtoMessage() {}
func (*UnsignedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{0}
}
func (m *UnsignedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnsignedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedMessage.Merge(dst, src)
}
func (m *UnsignedMessage) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedMessage proto.InternalMessageInfo

func (m *UnsignedMessage) GetMessageType() MessageType {
	if m != nil {
		return m.MessageType
	}
	return MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE
}

func (m *UnsignedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type SignedMessage struct {
	Message   []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignedMessage) Reset()      { *m = SignedMessage{} }
func (*SignedMessage) ProtoMessage() {}
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{1}
}
func (m *SignedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedMessage.Merge(dst, src)
}
func (m *SignedMessage) XXX_Size() int {
	return m.Size()
}
func (m *SignedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignedMessage proto.InternalMessageInfo

func (m *SignedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Vote struct {
	Height    uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *Vote) Reset()      { *m = Vote{} }
func (*Vote) ProtoMessage() {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{2}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(dst, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Vote) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type IHaveBlockProposal struct {
	Height    uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *IHaveBlockProposal) Reset()      { *m = IHaveBlockProposal{} }
func (*IHaveBlockProposal) ProtoMessage() {}
func (*IHaveBlockProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{3}
}
func (m *IHaveBlockProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IHaveBlockProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IHaveBlockProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IHaveBlockProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IHaveBlockProposal.Merge(dst, src)
}
func (m *IHaveBlockProposal) XXX_Size() int {
	return m.Size()
}
func (m *IHaveBlockProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_IHaveBlockProposal.DiscardUnknown(m)
}

var xxx_messageInfo_IHaveBlockProposal proto.InternalMessageInfo

func (m *IHaveBlockProposal) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *IHaveBlockProposal) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type RequestBlockProposal struct {
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *RequestBlockProposal) Reset()      { *m = RequestBlockProposal{} }
func (*RequestBlockProposal) ProtoMessage() {}
func (*RequestBlockProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{4}
}
func (m *RequestBlockProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestBlockProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestBlockProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestBlockProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBlockProposal.Merge(dst, src)
}
func (m *RequestBlockProposal) XXX_Size() int {
	return m.Size()
}
func (m *RequestBlockProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBlockProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBlockProposal proto.InternalMessageInfo

func (m *RequestBlockProposal) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type RequestBlockProposalReply struct {
	Block []byte `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *RequestBlockProposalReply) Reset()      { *m = RequestBlockProposalReply{} }
func (*RequestBlockProposalReply) ProtoMessage() {}
func (*RequestBlockProposalReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{5}
}
func (m *RequestBlockProposalReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestBlockProposalReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestBlockProposalReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestBlockProposalReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBlockProposalReply.Merge(dst, src)
}
func (m *RequestBlockProposalReply) XXX_Size() int {
	return m.Size()
}
func (m *RequestBlockProposalReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBlockProposalReply.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBlockProposalReply proto.InternalMessageInfo

func (m *RequestBlockProposalReply) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

type GetConsensusState struct {
}

func (m *GetConsensusState) Reset()      { *m = GetConsensusState{} }
func (*GetConsensusState) ProtoMessage() {}
func (*GetConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{6}
}
func (m *GetConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConsensusState.Merge(dst, src)
}
func (m *GetConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *GetConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_GetConsensusState proto.InternalMessageInfo

type GetConsensusStateReply struct {
	LedgerHeight    uint32    `protobuf:"varint,1,opt,name=ledger_height,json=ledgerHeight,proto3" json:"ledger_height,omitempty"`
	LedgerBlockHash []byte    `protobuf:"bytes,2,opt,name=ledger_block_hash,json=ledgerBlockHash,proto3" json:"ledger_block_hash,omitempty"`
	ConsensusHeight uint32    `protobuf:"varint,3,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height,omitempty"`
	SyncState       SyncState `protobuf:"varint,4,opt,name=sync_state,json=syncState,proto3,enum=pb.SyncState" json:"sync_state,omitempty"`
}

func (m *GetConsensusStateReply) Reset()      { *m = GetConsensusStateReply{} }
func (*GetConsensusStateReply) ProtoMessage() {}
func (*GetConsensusStateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{7}
}
func (m *GetConsensusStateReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConsensusStateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConsensusStateReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetConsensusStateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConsensusStateReply.Merge(dst, src)
}
func (m *GetConsensusStateReply) XXX_Size() int {
	return m.Size()
}
func (m *GetConsensusStateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConsensusStateReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetConsensusStateReply proto.InternalMessageInfo

func (m *GetConsensusStateReply) GetLedgerHeight() uint32 {
	if m != nil {
		return m.LedgerHeight
	}
	return 0
}

func (m *GetConsensusStateReply) GetLedgerBlockHash() []byte {
	if m != nil {
		return m.LedgerBlockHash
	}
	return nil
}

func (m *GetConsensusStateReply) GetConsensusHeight() uint32 {
	if m != nil {
		return m.ConsensusHeight
	}
	return 0
}

func (m *GetConsensusStateReply) GetSyncState() SyncState {
	if m != nil {
		return m.SyncState
	}
	return SyncStarted
}

type GetBlockHeaders struct {
	StartHeight uint32 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   uint32 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (m *GetBlockHeaders) Reset()      { *m = GetBlockHeaders{} }
func (*GetBlockHeaders) ProtoMessage() {}
func (*GetBlockHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{8}
}
func (m *GetBlockHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBlockHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockHeaders.Merge(dst, src)
}
func (m *GetBlockHeaders) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockHeaders proto.InternalMessageInfo

func (m *GetBlockHeaders) GetStartHeight() uint32 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *GetBlockHeaders) GetEndHeight() uint32 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

type GetBlockHeadersReply struct {
	BlockHeaders [][]byte `protobuf:"bytes,1,rep,name=block_headers,json=blockHeaders" json:"block_headers,omitempty"`
}

func (m *GetBlockHeadersReply) Reset()      { *m = GetBlockHeadersReply{} }
func (*GetBlockHeadersReply) ProtoMessage() {}
func (*GetBlockHeadersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{9}
}
func (m *GetBlockHeadersReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockHeadersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockHeadersReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBlockHeadersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockHeadersReply.Merge(dst, src)
}
func (m *GetBlockHeadersReply) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockHeadersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockHeadersReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockHeadersReply proto.InternalMessageInfo

func (m *GetBlockHeadersReply) GetBlockHeaders() [][]byte {
	if m != nil {
		return m.BlockHeaders
	}
	return nil
}

type GetBlocks struct {
	StartHeight uint32 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   uint32 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (m *GetBlocks) Reset()      { *m = GetBlocks{} }
func (*GetBlocks) ProtoMessage() {}
func (*GetBlocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{10}
}
func (m *GetBlocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBlocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlocks.Merge(dst, src)
}
func (m *GetBlocks) XXX_Size() int {
	return m.Size()
}
func (m *GetBlocks) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlocks.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlocks proto.InternalMessageInfo

func (m *GetBlocks) GetStartHeight() uint32 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *GetBlocks) GetEndHeight() uint32 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

type GetBlocksReply struct {
	Blocks [][]byte `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *GetBlocksReply) Reset()      { *m = GetBlocksReply{} }
func (*GetBlocksReply) ProtoMessage() {}
func (*GetBlocksReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{11}
}
func (m *GetBlocksReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlocksReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlocksReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBlocksReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlocksReply.Merge(dst, src)
}
func (m *GetBlocksReply) XXX_Size() int {
	return m.Size()
}
func (m *GetBlocksReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlocksReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlocksReply proto.InternalMessageInfo

func (m *GetBlocksReply) GetBlocks() [][]byte {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type Relay struct {
	SrcAddr           string        `protobuf:"bytes,1,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	DestId            []byte        `protobuf:"bytes,2,opt,name=dest_id,json=destId,proto3" json:"dest_id,omitempty"`
	Payload           []byte        `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	SigChain          *por.SigChain `protobuf:"bytes,4,opt,name=sig_chain,json=sigChain" json:"sig_chain,omitempty"`
	MaxHoldingSeconds uint32        `protobuf:"varint,5,opt,name=max_holding_seconds,json=maxHoldingSeconds,proto3" json:"max_holding_seconds,omitempty"`
}

func (m *Relay) Reset()      { *m = Relay{} }
func (*Relay) ProtoMessage() {}
func (*Relay) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{12}
}
func (m *Relay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Relay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relay.Merge(dst, src)
}
func (m *Relay) XXX_Size() int {
	return m.Size()
}
func (m *Relay) XXX_DiscardUnknown() {
	xxx_messageInfo_Relay.DiscardUnknown(m)
}

var xxx_messageInfo_Relay proto.InternalMessageInfo

func (m *Relay) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

func (m *Relay) GetDestId() []byte {
	if m != nil {
		return m.DestId
	}
	return nil
}

func (m *Relay) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Relay) GetSigChain() *por.SigChain {
	if m != nil {
		return m.SigChain
	}
	return nil
}

func (m *Relay) GetMaxHoldingSeconds() uint32 {
	if m != nil {
		return m.MaxHoldingSeconds
	}
	return 0
}

type Transactions struct {
	Transactions [][]byte `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Transactions) Reset()      { *m = Transactions{} }
func (*Transactions) ProtoMessage() {}
func (*Transactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodemessage_f607e37e43e905c4, []int{13}
}
func (m *Transactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Transactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transactions.Merge(dst, src)
}
func (m *Transactions) XXX_Size() int {
	return m.Size()
}
func (m *Transactions) XXX_DiscardUnknown() {
	xxx_messageInfo_Transactions.DiscardUnknown(m)
}

var xxx_messageInfo_Transactions proto.InternalMessageInfo

func (m *Transactions) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*UnsignedMessage)(nil), "pb.UnsignedMessage")
	proto.RegisterType((*SignedMessage)(nil), "pb.SignedMessage")
	proto.RegisterType((*Vote)(nil), "pb.Vote")
	proto.RegisterType((*IHaveBlockProposal)(nil), "pb.IHaveBlockProposal")
	proto.RegisterType((*RequestBlockProposal)(nil), "pb.RequestBlockProposal")
	proto.RegisterType((*RequestBlockProposalReply)(nil), "pb.RequestBlockProposalReply")
	proto.RegisterType((*GetConsensusState)(nil), "pb.GetConsensusState")
	proto.RegisterType((*GetConsensusStateReply)(nil), "pb.GetConsensusStateReply")
	proto.RegisterType((*GetBlockHeaders)(nil), "pb.GetBlockHeaders")
	proto.RegisterType((*GetBlockHeadersReply)(nil), "pb.GetBlockHeadersReply")
	proto.RegisterType((*GetBlocks)(nil), "pb.GetBlocks")
	proto.RegisterType((*GetBlocksReply)(nil), "pb.GetBlocksReply")
	proto.RegisterType((*Relay)(nil), "pb.Relay")
	proto.RegisterType((*Transactions)(nil), "pb.Transactions")
	proto.RegisterEnum("pb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("pb.AllowedSignedMessageType", AllowedSignedMessageType_name, AllowedSignedMessageType_value)
	proto.RegisterEnum("pb.AllowedUnsignedMessageType", AllowedUnsignedMessageType_name, AllowedUnsignedMessageType_value)
	proto.RegisterEnum("pb.AllowedDirectMessageType", AllowedDirectMessageType_name, AllowedDirectMessageType_value)
	proto.RegisterEnum("pb.AllowedRelayMessageType", AllowedRelayMessageType_name, AllowedRelayMessageType_value)
	proto.RegisterEnum("pb.AllowedBroadcastPushMessageType", AllowedBroadcastPushMessageType_name, AllowedBroadcastPushMessageType_value)
	proto.RegisterEnum("pb.AllowedBroadcastPullMessageType", AllowedBroadcastPullMessageType_name, AllowedBroadcastPullMessageType_value)
	proto.RegisterEnum("pb.AllowedBroadcastTreeMessageType", AllowedBroadcastTreeMessageType_name, AllowedBroadcastTreeMessageType_value)
}
func (x MessageType) String() string {
	s, ok := MessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedSignedMessageType) String() string {
	s, ok := AllowedSignedMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedUnsignedMessageType) String() string {
	s, ok := AllowedUnsignedMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedDirectMessageType) String() string {
	s, ok := AllowedDirectMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedRelayMessageType) String() string {
	s, ok := AllowedRelayMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedBroadcastPushMessageType) String() string {
	s, ok := AllowedBroadcastPushMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedBroadcastPullMessageType) String() string {
	s, ok := AllowedBroadcastPullMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedBroadcastTreeMessageType) String() string {
	s, ok := AllowedBroadcastTreeMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UnsignedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnsignedMessage)
	if !ok {
		that2, ok := that.(UnsignedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageType != that1.MessageType {
		return false
	}
	if !bytes.Equal(this.Message, that1.Message) {
		return false
	}
	return true
}
func (this *SignedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignedMessage)
	if !ok {
		that2, ok := that.(SignedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Message, that1.Message) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *Vote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vote)
	if !ok {
		that2, ok := that.(Vote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if !bytes.Equal(this.BlockHash, that1.BlockHash) {
		return false
	}
	return true
}
func (this *IHaveBlockProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IHaveBlockProposal)
	if !ok {
		that2, ok := that.(IHaveBlockProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if !bytes.Equal(this.BlockHash, that1.BlockHash) {
		return false
	}
	return true
}
func (this *RequestBlockProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestBlockProposal)
	if !ok {
		that2, ok := that.(RequestBlockProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BlockHash, that1.BlockHash) {
		return false
	}
	return true
}
func (this *RequestBlockProposalReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestBlockProposalReply)
	if !ok {
		that2, ok := that.(RequestBlockProposalReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Block, that1.Block) {
		return false
	}
	return true
}
func (this *GetConsensusState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetConsensusState)
	if !ok {
		that2, ok := that.(GetConsensusState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetConsensusStateReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetConsensusStateReply)
	if !ok {
		that2, ok := that.(GetConsensusStateReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LedgerHeight != that1.LedgerHeight {
		return false
	}
	if !bytes.Equal(this.LedgerBlockHash, that1.LedgerBlockHash) {
		return false
	}
	if this.ConsensusHeight != that1.ConsensusHeight {
		return false
	}
	if this.SyncState != that1.SyncState {
		return false
	}
	return true
}
func (this *GetBlockHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBlockHeaders)
	if !ok {
		that2, ok := that.(GetBlockHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartHeight != that1.StartHeight {
		return false
	}
	if this.EndHeight != that1.EndHeight {
		return false
	}
	return true
}
func (this *GetBlockHeadersReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBlockHeadersReply)
	if !ok {
		that2, ok := that.(GetBlockHeadersReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BlockHeaders) != len(that1.BlockHeaders) {
		return false
	}
	for i := range this.BlockHeaders {
		if !bytes.Equal(this.BlockHeaders[i], that1.BlockHeaders[i]) {
			return false
		}
	}
	return true
}
func (this *GetBlocks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBlocks)
	if !ok {
		that2, ok := that.(GetBlocks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartHeight != that1.StartHeight {
		return false
	}
	if this.EndHeight != that1.EndHeight {
		return false
	}
	return true
}
func (this *GetBlocksReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBlocksReply)
	if !ok {
		that2, ok := that.(GetBlocksReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return false
	}
	for i := range this.Blocks {
		if !bytes.Equal(this.Blocks[i], that1.Blocks[i]) {
			return false
		}
	}
	return true
}
func (this *Relay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relay)
	if !ok {
		that2, ok := that.(Relay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SrcAddr != that1.SrcAddr {
		return false
	}
	if !bytes.Equal(this.DestId, that1.DestId) {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.SigChain.Equal(that1.SigChain) {
		return false
	}
	if this.MaxHoldingSeconds != that1.MaxHoldingSeconds {
		return false
	}
	return true
}
func (this *Transactions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transactions)
	if !ok {
		that2, ok := that.(Transactions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !bytes.Equal(this.Transactions[i], that1.Transactions[i]) {
			return false
		}
	}
	return true
}
func (this *UnsignedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.UnsignedMessage{")
	s = append(s, "MessageType: "+fmt.Sprintf("%#v", this.MessageType)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SignedMessage{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Vote{")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "BlockHash: "+fmt.Sprintf("%#v", this.BlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IHaveBlockProposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.IHaveBlockProposal{")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "BlockHash: "+fmt.Sprintf("%#v", this.BlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestBlockProposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RequestBlockProposal{")
	s = append(s, "BlockHash: "+fmt.Sprintf("%#v", this.BlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestBlockProposalReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RequestBlockProposalReply{")
	s = append(s, "Block: "+fmt.Sprintf("%#v", this.Block)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetConsensusState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.GetConsensusState{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetConsensusStateReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.GetConsensusStateReply{")
	s = append(s, "LedgerHeight: "+fmt.Sprintf("%#v", this.LedgerHeight)+",\n")
	s = append(s, "LedgerBlockHash: "+fmt.Sprintf("%#v", this.LedgerBlockHash)+",\n")
	s = append(s, "ConsensusHeight: "+fmt.Sprintf("%#v", this.ConsensusHeight)+",\n")
	s = append(s, "SyncState: "+fmt.Sprintf("%#v", this.SyncState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBlockHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetBlockHeaders{")
	s = append(s, "StartHeight: "+fmt.Sprintf("%#v", this.StartHeight)+",\n")
	s = append(s, "EndHeight: "+fmt.Sprintf("%#v", this.EndHeight)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBlockHeadersReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetBlockHeadersReply{")
	s = append(s, "BlockHeaders: "+fmt.Sprintf("%#v", this.BlockHeaders)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBlocks) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetBlocks{")
	s = append(s, "StartHeight: "+fmt.Sprintf("%#v", this.StartHeight)+",\n")
	s = append(s, "EndHeight: "+fmt.Sprintf("%#v", this.EndHeight)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBlocksReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetBlocksReply{")
	s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Relay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Relay{")
	s = append(s, "SrcAddr: "+fmt.Sprintf("%#v", this.SrcAddr)+",\n")
	s = append(s, "DestId: "+fmt.Sprintf("%#v", this.DestId)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	if this.SigChain != nil {
		s = append(s, "SigChain: "+fmt.Sprintf("%#v", this.SigChain)+",\n")
	}
	s = append(s, "MaxHoldingSeconds: "+fmt.Sprintf("%#v", this.MaxHoldingSeconds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Transactions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.Transactions{")
	s = append(s, "Transactions: "+fmt.Sprintf("%#v", this.Transactions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNodemessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UnsignedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.MessageType))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *SignedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.Height))
	}
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	return i, nil
}

func (m *IHaveBlockProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IHaveBlockProposal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.Height))
	}
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	return i, nil
}

func (m *RequestBlockProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBlockProposal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	return i, nil
}

func (m *RequestBlockProposalReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBlockProposalReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Block) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.Block)))
		i += copy(dAtA[i:], m.Block)
	}
	return i, nil
}

func (m *GetConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConsensusState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetConsensusStateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConsensusStateReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LedgerHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.LedgerHeight))
	}
	if len(m.LedgerBlockHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.LedgerBlockHash)))
		i += copy(dAtA[i:], m.LedgerBlockHash)
	}
	if m.ConsensusHeight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.ConsensusHeight))
	}
	if m.SyncState != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.SyncState))
	}
	return i, nil
}

func (m *GetBlockHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockHeaders) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.EndHeight))
	}
	return i, nil
}

func (m *GetBlockHeadersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockHeadersReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockHeaders) > 0 {
		for _, b := range m.BlockHeaders {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNodemessage(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *GetBlocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlocks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.EndHeight))
	}
	return i, nil
}

func (m *GetBlocksReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlocksReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNodemessage(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Relay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SrcAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.SrcAddr)))
		i += copy(dAtA[i:], m.SrcAddr)
	}
	if len(m.DestId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.DestId)))
		i += copy(dAtA[i:], m.DestId)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.SigChain != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.SigChain.Size()))
		n1, err := m.SigChain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MaxHoldingSeconds != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNodemessage(dAtA, i, uint64(m.MaxHoldingSeconds))
	}
	return i, nil
}

func (m *Transactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transactions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNodemessage(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func encodeVarintNodemessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUnsignedMessage(r randyNodemessage, easy bool) *UnsignedMessage {
	this := &UnsignedMessage{}
	this.MessageType = MessageType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}[r.Intn(13)])
	v1 := r.Intn(100)
	this.Message = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Message[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSignedMessage(r randyNodemessage, easy bool) *SignedMessage {
	this := &SignedMessage{}
	v2 := r.Intn(100)
	this.Message = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Message[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(100)
	this.Signature = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVote(r randyNodemessage, easy bool) *Vote {
	this := &Vote{}
	this.Height = uint32(r.Uint32())
	v4 := r.Intn(100)
	this.BlockHash = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.BlockHash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIHaveBlockProposal(r randyNodemessage, easy bool) *IHaveBlockProposal {
	this := &IHaveBlockProposal{}
	this.Height = uint32(r.Uint32())
	v5 := r.Intn(100)
	this.BlockHash = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.BlockHash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestBlockProposal(r randyNodemessage, easy bool) *RequestBlockProposal {
	this := &RequestBlockProposal{}
	v6 := r.Intn(100)
	this.BlockHash = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.BlockHash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestBlockProposalReply(r randyNodemessage, easy bool) *RequestBlockProposalReply {
	this := &RequestBlockProposalReply{}
	v7 := r.Intn(100)
	this.Block = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Block[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetConsensusState(r randyNodemessage, easy bool) *GetConsensusState {
	this := &GetConsensusState{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetConsensusStateReply(r randyNodemessage, easy bool) *GetConsensusStateReply {
	this := &GetConsensusStateReply{}
	this.LedgerHeight = uint32(r.Uint32())
	v8 := r.Intn(100)
	this.LedgerBlockHash = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.LedgerBlockHash[i] = byte(r.Intn(256))
	}
	this.ConsensusHeight = uint32(r.Uint32())
	this.SyncState = SyncState([]int32{0, 1, 2, 3}[r.Intn(4)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBlockHeaders(r randyNodemessage, easy bool) *GetBlockHeaders {
	this := &GetBlockHeaders{}
	this.StartHeight = uint32(r.Uint32())
	this.EndHeight = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBlockHeadersReply(r randyNodemessage, easy bool) *GetBlockHeadersReply {
	this := &GetBlockHeadersReply{}
	v9 := r.Intn(10)
	this.BlockHeaders = make([][]byte, v9)
	for i := 0; i < v9; i++ {
		v10 := r.Intn(100)
		this.BlockHeaders[i] = make([]byte, v10)
		for j := 0; j < v10; j++ {
			this.BlockHeaders[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBlocks(r randyNodemessage, easy bool) *GetBlocks {
	this := &GetBlocks{}
	this.StartHeight = uint32(r.Uint32())
	this.EndHeight = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBlocksReply(r randyNodemessage, easy bool) *GetBlocksReply {
	this := &GetBlocksReply{}
	v11 := r.Intn(10)
	this.Blocks = make([][]byte, v11)
	for i := 0; i < v11; i++ {
		v12 := r.Intn(100)
		this.Blocks[i] = make([]byte, v12)
		for j := 0; j < v12; j++ {
			this.Blocks[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRelay(r randyNodemessage, easy bool) *Relay {
	this := &Relay{}
	this.SrcAddr = string(randStringNodemessage(r))
	v13 := r.Intn(100)
	this.DestId = make([]byte, v13)
	for i := 0; i < v13; i++ {
		this.DestId[i] = byte(r.Intn(256))
	}
	v14 := r.Intn(100)
	this.Payload = make([]byte, v14)
	for i := 0; i < v14; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.SigChain = por.NewPopulatedSigChain(r, easy)
	}
	this.MaxHoldingSeconds = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransactions(r randyNodemessage, easy bool) *Transactions {
	this := &Transactions{}
	v15 := r.Intn(10)
	this.Transactions = make([][]byte, v15)
	for i := 0; i < v15; i++ {
		v16 := r.Intn(100)
		this.Transactions[i] = make([]byte, v16)
		for j := 0; j < v16; j++ {
			this.Transactions[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyNodemessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNodemessage(r randyNodemessage) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNodemessage(r randyNodemessage) string {
	v17 := r.Intn(100)
	tmps := make([]rune, v17)
	for i := 0; i < v17; i++ {
		tmps[i] = randUTF8RuneNodemessage(r)
	}
	return string(tmps)
}
func randUnrecognizedNodemessage(r randyNodemessage, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNodemessage(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNodemessage(dAtA []byte, r randyNodemessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNodemessage(dAtA, uint64(key))
		v18 := r.Int63()
		if r.Intn(2) == 0 {
			v18 *= -1
		}
		dAtA = encodeVarintPopulateNodemessage(dAtA, uint64(v18))
	case 1:
		dAtA = encodeVarintPopulateNodemessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNodemessage(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNodemessage(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNodemessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNodemessage(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UnsignedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovNodemessage(uint64(m.MessageType))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	return n
}

func (m *SignedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovNodemessage(uint64(m.Height))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	return n
}

func (m *IHaveBlockProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovNodemessage(uint64(m.Height))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	return n
}

func (m *RequestBlockProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	return n
}

func (m *RequestBlockProposalReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	return n
}

func (m *GetConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetConsensusStateReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LedgerHeight != 0 {
		n += 1 + sovNodemessage(uint64(m.LedgerHeight))
	}
	l = len(m.LedgerBlockHash)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	if m.ConsensusHeight != 0 {
		n += 1 + sovNodemessage(uint64(m.ConsensusHeight))
	}
	if m.SyncState != 0 {
		n += 1 + sovNodemessage(uint64(m.SyncState))
	}
	return n
}

func (m *GetBlockHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartHeight != 0 {
		n += 1 + sovNodemessage(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovNodemessage(uint64(m.EndHeight))
	}
	return n
}

func (m *GetBlockHeadersReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockHeaders) > 0 {
		for _, b := range m.BlockHeaders {
			l = len(b)
			n += 1 + l + sovNodemessage(uint64(l))
		}
	}
	return n
}

func (m *GetBlocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartHeight != 0 {
		n += 1 + sovNodemessage(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovNodemessage(uint64(m.EndHeight))
	}
	return n
}

func (m *GetBlocksReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			l = len(b)
			n += 1 + l + sovNodemessage(uint64(l))
		}
	}
	return n
}

func (m *Relay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcAddr)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	l = len(m.DestId)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovNodemessage(uint64(l))
	}
	if m.SigChain != nil {
		l = m.SigChain.Size()
		n += 1 + l + sovNodemessage(uint64(l))
	}
	if m.MaxHoldingSeconds != 0 {
		n += 1 + sovNodemessage(uint64(m.MaxHoldingSeconds))
	}
	return n
}

func (m *Transactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovNodemessage(uint64(l))
		}
	}
	return n
}

func sovNodemessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNodemessage(x uint64) (n int) {
	return sovNodemessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UnsignedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnsignedMessage{`,
		`MessageType:` + fmt.Sprintf("%v", this.MessageType) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignedMessage{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Vote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Vote{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`BlockHash:` + fmt.Sprintf("%v", this.BlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IHaveBlockProposal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IHaveBlockProposal{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`BlockHash:` + fmt.Sprintf("%v", this.BlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestBlockProposal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestBlockProposal{`,
		`BlockHash:` + fmt.Sprintf("%v", this.BlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestBlockProposalReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestBlockProposalReply{`,
		`Block:` + fmt.Sprintf("%v", this.Block) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetConsensusState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetConsensusState{`,
		`}`,
	}, "")
	return s
}
func (this *GetConsensusStateReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetConsensusStateReply{`,
		`LedgerHeight:` + fmt.Sprintf("%v", this.LedgerHeight) + `,`,
		`LedgerBlockHash:` + fmt.Sprintf("%v", this.LedgerBlockHash) + `,`,
		`ConsensusHeight:` + fmt.Sprintf("%v", this.ConsensusHeight) + `,`,
		`SyncState:` + fmt.Sprintf("%v", this.SyncState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBlockHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBlockHeaders{`,
		`StartHeight:` + fmt.Sprintf("%v", this.StartHeight) + `,`,
		`EndHeight:` + fmt.Sprintf("%v", this.EndHeight) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBlockHeadersReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBlockHeadersReply{`,
		`BlockHeaders:` + fmt.Sprintf("%v", this.BlockHeaders) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBlocks) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBlocks{`,
		`StartHeight:` + fmt.Sprintf("%v", this.StartHeight) + `,`,
		`EndHeight:` + fmt.Sprintf("%v", this.EndHeight) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBlocksReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBlocksReply{`,
		`Blocks:` + fmt.Sprintf("%v", this.Blocks) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Relay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Relay{`,
		`SrcAddr:` + fmt.Sprintf("%v", this.SrcAddr) + `,`,
		`DestId:` + fmt.Sprintf("%v", this.DestId) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`SigChain:` + strings.Replace(fmt.Sprintf("%v", this.SigChain), "SigChain", "por.SigChain", 1) + `,`,
		`MaxHoldingSeconds:` + fmt.Sprintf("%v", this.MaxHoldingSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Transactions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transactions{`,
		`Transactions:` + fmt.Sprintf("%v", this.Transactions) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNodemessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UnsignedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsignedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsignedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IHaveBlockProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IHaveBlockProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IHaveBlockProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBlockProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBlockProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBlockProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBlockProposalReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBlockProposalReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBlockProposalReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConsensusStateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConsensusStateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConsensusStateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerHeight", wireType)
			}
			m.LedgerHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LedgerHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerBlockHash = append(m.LedgerBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LedgerBlockHash == nil {
				m.LedgerBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			m.ConsensusHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncState", wireType)
			}
			m.SyncState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncState |= (SyncState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockHeadersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockHeadersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockHeadersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaders", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeaders = append(m.BlockHeaders, make([]byte, postIndex-iNdEx))
			copy(m.BlockHeaders[len(m.BlockHeaders)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlocksReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlocksReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlocksReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, make([]byte, postIndex-iNdEx))
			copy(m.Blocks[len(m.Blocks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestId = append(m.DestId[:0], dAtA[iNdEx:postIndex]...)
			if m.DestId == nil {
				m.DestId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SigChain == nil {
				m.SigChain = &por.SigChain{}
			}
			if err := m.SigChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHoldingSeconds", wireType)
			}
			m.MaxHoldingSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHoldingSeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodemessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodemessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodemessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodemessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodemessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodemessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNodemessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNodemessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNodemessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNodemessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodemessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/nodemessage.proto", fileDescriptor_nodemessage_f607e37e43e905c4) }

var fileDescriptor_nodemessage_f607e37e43e905c4 = []byte{
	// 1173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xbf, 0x73, 0xda, 0x66,
	0x18, 0x46, 0xf8, 0x27, 0xaf, 0x71, 0x2c, 0x7f, 0x21, 0x36, 0x76, 0x12, 0xd9, 0x96, 0x93, 0x94,
	0xd0, 0x16, 0xae, 0xee, 0x75, 0x6a, 0x3b, 0x08, 0xd0, 0x01, 0x17, 0x0c, 0x54, 0x12, 0x6e, 0x3d,
	0xe9, 0x84, 0xf4, 0x15, 0xb8, 0x60, 0x89, 0xea, 0x13, 0x6d, 0xd8, 0xfa, 0x27, 0xf4, 0xcf, 0xe8,
	0x9a, 0xad, 0x53, 0x87, 0x4e, 0x19, 0x3d, 0x66, 0xac, 0xf1, 0xd2, 0x31, 0x63, 0xef, 0xba, 0xf4,
	0x90, 0x3e, 0xc9, 0x48, 0x40, 0x49, 0x7b, 0x9d, 0xac, 0xf7, 0x7d, 0x9f, 0xf7, 0xd7, 0xf3, 0x3e,
	0x12, 0x86, 0xd4, 0xa0, 0x9d, 0x37, 0x2d, 0x03, 0x5f, 0x61, 0x42, 0xb4, 0x0e, 0xce, 0x0d, 0x6c,
	0xcb, 0xb1, 0x50, 0x7c, 0xd0, 0x3e, 0xfc, 0xb8, 0xd3, 0x73, 0xba, 0xc3, 0x76, 0x4e, 0xb7, 0xae,
	0xf2, 0x1d, 0xab, 0x63, 0xe5, 0xdd, 0x50, 0x7b, 0xf8, 0xad, 0x6b, 0xb9, 0x86, 0xfb, 0xe4, 0xa5,
	0x1c, 0x66, 0xa6, 0xe0, 0xe6, 0x4b, 0xd3, 0xb2, 0x3b, 0x93, 0x3f, 0xf9, 0x81, 0x65, 0xe7, 0x49,
	0xaf, 0xa3, 0x77, 0xb5, 0x9e, 0x49, 0x91, 0xdb, 0xb4, 0xa5, 0x67, 0xf2, 0x2a, 0xec, 0xb4, 0x4c,
	0xd2, 0xeb, 0x98, 0xd8, 0x38, 0xf7, 0x86, 0x40, 0x67, 0x90, 0xa4, 0xf3, 0xa8, 0xce, 0x68, 0x80,
	0xd3, 0xcc, 0x31, 0x93, 0xb9, 0x77, 0xb6, 0x93, 0x1b, 0xb4, 0x73, 0x14, 0xa2, 0x8c, 0x06, 0x58,
	0xda, 0xba, 0xba, 0x33, 0x50, 0x1a, 0x36, 0xa8, 0x99, 0x8e, 0x1f, 0x33, 0x99, 0xa4, 0xe4, 0x9b,
	0x7c, 0x19, 0xb6, 0xe5, 0x50, 0xf9, 0x29, 0x28, 0x13, 0x82, 0xa2, 0x47, 0x90, 0x98, 0x4c, 0xa2,
	0x39, 0x43, 0xdb, 0x2f, 0x73, 0xe7, 0xe0, 0xbf, 0x84, 0xd5, 0x0b, 0xcb, 0xc1, 0x68, 0x0f, 0xd6,
	0xbb, 0xb8, 0xd7, 0xe9, 0x3a, 0x6e, 0xfa, 0xb6, 0x44, 0x2d, 0xf4, 0x18, 0xa0, 0xdd, 0xb7, 0xf4,
	0x97, 0x6a, 0x57, 0x23, 0x5d, 0x3f, 0xdd, 0xf5, 0x54, 0x34, 0xd2, 0xe5, 0x5f, 0x00, 0xaa, 0x56,
	0xb4, 0xef, 0x71, 0x61, 0xe2, 0x69, 0xda, 0xd6, 0xc0, 0x22, 0x5a, 0xff, 0xbf, 0x16, 0xfb, 0x0c,
	0x52, 0x12, 0xfe, 0x6e, 0x88, 0x89, 0x13, 0x2e, 0x17, 0x4e, 0x63, 0xa2, 0x69, 0x9f, 0xc0, 0xc1,
	0xbc, 0x34, 0x09, 0x0f, 0xfa, 0x23, 0x94, 0x82, 0x35, 0x17, 0x49, 0xd3, 0x3c, 0x83, 0xbf, 0x0f,
	0xbb, 0x65, 0xec, 0x14, 0x2d, 0x93, 0x60, 0x93, 0x0c, 0x89, 0xec, 0x68, 0x0e, 0xe6, 0x7f, 0x63,
	0x60, 0x6f, 0xc6, 0xeb, 0x55, 0x39, 0x85, 0xed, 0x3e, 0x36, 0x3a, 0xd8, 0x56, 0x43, 0x7b, 0x25,
	0x3d, 0x67, 0xc5, 0xdb, 0x2e, 0x0b, 0xbb, 0x14, 0x34, 0xb3, 0xe4, 0x8e, 0x17, 0x28, 0xf8, 0x33,
	0xa3, 0xe7, 0xc0, 0xea, 0x7e, 0x1f, 0xbf, 0xe6, 0x8a, 0x5b, 0x73, 0x27, 0xf0, 0xd3, 0xb2, 0x1f,
	0x01, 0x90, 0x91, 0xa9, 0xab, 0x64, 0x32, 0x4e, 0x7a, 0xd5, 0x95, 0xcd, 0xf6, 0x44, 0x36, 0xf2,
	0xc8, 0xd4, 0xbd, 0x19, 0x13, 0xc4, 0x7f, 0xe4, 0x65, 0xd8, 0x29, 0x63, 0x8f, 0x88, 0x0a, 0xd6,
	0x0c, 0x6c, 0x13, 0x74, 0x02, 0x49, 0xe2, 0x68, 0xb6, 0x13, 0x9e, 0x7d, 0xcb, 0xf5, 0x55, 0x82,
	0xc3, 0x60, 0xd3, 0xf0, 0x01, 0x71, 0x17, 0x90, 0xc0, 0xa6, 0xe1, 0x85, 0xf9, 0xcf, 0x21, 0x15,
	0x29, 0x1a, 0xd0, 0x42, 0x57, 0xf5, 0xbc, 0x69, 0xe6, 0x78, 0x25, 0x93, 0x94, 0x92, 0xed, 0x29,
	0x24, 0x7f, 0x0e, 0x09, 0x3f, 0xf9, 0xff, 0x98, 0x25, 0x03, 0xf7, 0x82, 0x72, 0xde, 0x14, 0x7b,
	0xb0, 0xee, 0x36, 0xf4, 0xdb, 0x53, 0x8b, 0x7f, 0xcd, 0xc0, 0x9a, 0x84, 0xfb, 0xda, 0x08, 0x1d,
	0xc0, 0x26, 0xb1, 0x75, 0x55, 0x33, 0x0c, 0xdb, 0xed, 0x98, 0x90, 0x36, 0x88, 0xad, 0x0b, 0x86,
	0x61, 0xa3, 0x7d, 0xd8, 0x30, 0x30, 0x71, 0xd4, 0x9e, 0x41, 0x4f, 0xb5, 0x3e, 0x31, 0xab, 0xc6,
	0xe4, 0x85, 0x1a, 0x68, 0xa3, 0xbe, 0xa5, 0x19, 0xee, 0x61, 0x92, 0x92, 0x6f, 0xa2, 0xac, 0xfb,
	0x42, 0xa9, 0xee, 0xeb, 0xef, 0xde, 0x63, 0x6b, 0x72, 0x0f, 0xcb, 0xce, 0xc9, 0xbd, 0x4e, 0x71,
	0xe2, 0x94, 0x36, 0x09, 0x7d, 0x42, 0x39, 0xb8, 0x7f, 0xa5, 0xbd, 0x52, 0xbb, 0x56, 0xdf, 0xe8,
	0x99, 0x1d, 0x95, 0x60, 0xdd, 0x32, 0x0d, 0x92, 0x5e, 0x73, 0xb7, 0xda, 0xbd, 0xd2, 0x5e, 0x55,
	0xbc, 0x88, 0xec, 0x05, 0xf8, 0x33, 0x48, 0x2a, 0xb6, 0x66, 0x12, 0x4d, 0x77, 0x7a, 0x96, 0x49,
	0x10, 0x0f, 0x49, 0x67, 0xca, 0xf6, 0x09, 0x9e, 0xf6, 0x65, 0xdf, 0xc4, 0x61, 0x6b, 0xea, 0x13,
	0x82, 0x3e, 0x80, 0xd3, 0x73, 0x51, 0x96, 0x85, 0xb2, 0xa8, 0x2a, 0x97, 0x4d, 0x51, 0x6d, 0xd6,
	0x84, 0xa2, 0x58, 0x69, 0xd4, 0x4a, 0xa2, 0xa4, 0x96, 0x1a, 0x6a, 0xbd, 0xa1, 0xa8, 0x2d, 0x59,
	0x64, 0x63, 0x68, 0x13, 0x56, 0x2f, 0x1a, 0x8a, 0xc8, 0x32, 0xe8, 0x00, 0x1e, 0x54, 0xd5, 0x8a,
	0x70, 0x21, 0xaa, 0x85, 0x5a, 0xa3, 0xf8, 0x42, 0x6d, 0x4a, 0x8d, 0x66, 0x43, 0x16, 0x6a, 0x6c,
	0x1c, 0x1d, 0xc2, 0x9e, 0x24, 0x7e, 0xd5, 0x12, 0x65, 0x25, 0x1a, 0x5b, 0x41, 0xc7, 0xf0, 0x68,
	0x7e, 0x4c, 0x95, 0xc4, 0x66, 0xed, 0x92, 0x5d, 0x45, 0xfb, 0x70, 0xbf, 0x2c, 0x2a, 0x6a, 0xb1,
	0x51, 0x97, 0xc5, 0xba, 0xdc, 0x92, 0x55, 0x59, 0x11, 0x14, 0x91, 0x5d, 0x43, 0x8f, 0xe1, 0x60,
	0x4e, 0x80, 0xe6, 0xad, 0xa3, 0x07, 0xb0, 0x3b, 0x09, 0x7b, 0x55, 0x2b, 0xa2, 0x50, 0x12, 0x25,
	0x99, 0xdd, 0x40, 0x0f, 0x61, 0x7f, 0xc6, 0x4d, 0x73, 0x36, 0xd1, 0x3d, 0x80, 0x20, 0x28, 0xb3,
	0x09, 0x94, 0x02, 0xf6, 0xce, 0xa6, 0x28, 0x40, 0x09, 0x58, 0x93, 0xc4, 0x9a, 0x70, 0xc9, 0x6e,
	0x21, 0x16, 0x92, 0x8a, 0x24, 0xd4, 0x65, 0xa1, 0xa8, 0x54, 0x1b, 0x75, 0x99, 0x4d, 0x66, 0x7f,
	0x8d, 0x43, 0x5a, 0xe8, 0xf7, 0xad, 0x1f, 0xb0, 0x11, 0xfa, 0xbc, 0xfa, 0xbc, 0x0a, 0xb5, 0x5a,
	0xe3, 0x6b, 0x55, 0xae, 0x96, 0xeb, 0x62, 0x69, 0x31, 0xaf, 0x0f, 0x60, 0x37, 0x04, 0xa4, 0x24,
	0x3f, 0x03, 0x3e, 0xe4, 0x5e, 0xc4, 0x78, 0xb4, 0xcf, 0x42, 0xfa, 0x9f, 0xc0, 0x71, 0x08, 0x38,
	0x9f, 0xe9, 0x2c, 0x3c, 0x5b, 0x86, 0x0a, 0x68, 0xe7, 0x81, 0x9b, 0xc1, 0xce, 0xb9, 0xc1, 0x7c,
	0x8c, 0xcc, 0x26, 0xb2, 0x7f, 0x31, 0x70, 0x48, 0x09, 0x8c, 0xfc, 0x00, 0xba, 0x14, 0x3e, 0x87,
	0xa7, 0x5e, 0x6e, 0xab, 0xbe, 0x8c, 0xc4, 0x80, 0xad, 0x00, 0x1a, 0xe6, 0xc1, 0x57, 0x58, 0xb0,
	0x5e, 0x80, 0x5b, 0xac, 0x90, 0x53, 0x38, 0x5a, 0x84, 0xbd, 0x13, 0x48, 0x1a, 0x52, 0x33, 0x8d,
	0x3d, 0xbd, 0x1c, 0xc1, 0xc3, 0x48, 0x24, 0x22, 0x9f, 0xd7, 0x2b, 0x81, 0x7c, 0x4a, 0x3d, 0x1b,
	0xeb, 0xce, 0x5c, 0xf9, 0x94, 0xaa, 0x92, 0x58, 0x54, 0xde, 0x43, 0x3e, 0x14, 0x18, 0x95, 0x0f,
	0x75, 0x2f, 0x95, 0x0f, 0xc5, 0x2d, 0x97, 0xcf, 0x5c, 0xa0, 0xcf, 0x6f, 0x14, 0xb5, 0x44, 0x64,
	0x8b, 0x51, 0xb3, 0x22, 0x9b, 0xc2, 0x46, 0x45, 0x96, 0x81, 0x27, 0xff, 0x8c, 0x09, 0x6e, 0x1a,
	0xc8, 0x31, 0x8a, 0x9c, 0x7c, 0x02, 0x4e, 0xe0, 0xf1, 0x82, 0xa0, 0x7f, 0xee, 0xec, 0x37, 0xb0,
	0x4f, 0x4f, 0xe6, 0xfe, 0x56, 0x4c, 0x5f, 0x2c, 0x60, 0xdc, 0x15, 0xc0, 0x7b, 0x1c, 0xcc, 0xc3,
	0x51, 0xb9, 0x64, 0x47, 0x70, 0x44, 0x2b, 0x17, 0x6c, 0x4b, 0x33, 0x74, 0x8d, 0x38, 0xcd, 0x21,
	0xe9, 0x4e, 0x77, 0xc8, 0xc3, 0x87, 0x5e, 0x66, 0x41, 0x6a, 0x08, 0xa5, 0xa2, 0x20, 0x2b, 0x6a,
	0xb3, 0x25, 0x57, 0x16, 0xb7, 0x7a, 0x0a, 0x27, 0x73, 0x13, 0x22, 0x42, 0x94, 0xe6, 0xb5, 0xee,
	0xf7, 0x97, 0xb6, 0xae, 0xd5, 0x16, 0xb6, 0x9e, 0xb7, 0x8e, 0x62, 0x63, 0xbc, 0xa4, 0xa6, 0x22,
	0x89, 0xe2, 0xbf, 0x5a, 0xc7, 0x4d, 0x08, 0xaf, 0x53, 0xf8, 0xe2, 0xfa, 0x86, 0x8b, 0xbd, 0xbd,
	0xe1, 0x62, 0xef, 0x6e, 0x38, 0xe6, 0xcf, 0x1b, 0x8e, 0xf9, 0x71, 0xcc, 0x31, 0x3f, 0x8f, 0x39,
	0xe6, 0x97, 0x31, 0xc7, 0xbc, 0x19, 0x73, 0xcc, 0xf5, 0x98, 0x63, 0x7e, 0x1f, 0x73, 0xcc, 0x1f,
	0x63, 0x2e, 0xf6, 0x6e, 0xcc, 0x31, 0x3f, 0xdd, 0x72, 0xb1, 0xeb, 0x5b, 0x2e, 0xf6, 0xf6, 0x96,
	0x8b, 0xb5, 0xd7, 0xdd, 0xff, 0xc9, 0x3f, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xf6, 0x7f,
	0xb8, 0x17, 0x0c, 0x00, 0x00,
}
