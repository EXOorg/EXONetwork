// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sigchain.proto

package por

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SigAlgo int32

const (
	SigAlgo_ECDSA SigAlgo = 0
)

var SigAlgo_name = map[int32]string{
	0: "ECDSA",
}
var SigAlgo_value = map[string]int32{
	"ECDSA": 0,
}

func (x SigAlgo) String() string {
	return proto.EnumName(SigAlgo_name, int32(x))
}
func (SigAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sigchain_f8b6145f4b67340a, []int{0}
}

type SigChainElem struct {
	Addr                 []byte   `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	NextPubkey           []byte   `protobuf:"bytes,2,opt,name=NextPubkey,proto3" json:"NextPubkey,omitempty"`
	Mining               bool     `protobuf:"varint,3,opt,name=Mining,proto3" json:"Mining,omitempty"`
	SigAlgo              SigAlgo  `protobuf:"varint,4,opt,name=SigAlgo,proto3,enum=por.SigAlgo" json:"SigAlgo,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigChainElem) Reset()         { *m = SigChainElem{} }
func (m *SigChainElem) String() string { return proto.CompactTextString(m) }
func (*SigChainElem) ProtoMessage()    {}
func (*SigChainElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_sigchain_f8b6145f4b67340a, []int{0}
}
func (m *SigChainElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigChainElem.Unmarshal(m, b)
}
func (m *SigChainElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigChainElem.Marshal(b, m, deterministic)
}
func (dst *SigChainElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigChainElem.Merge(dst, src)
}
func (m *SigChainElem) XXX_Size() int {
	return xxx_messageInfo_SigChainElem.Size(m)
}
func (m *SigChainElem) XXX_DiscardUnknown() {
	xxx_messageInfo_SigChainElem.DiscardUnknown(m)
}

var xxx_messageInfo_SigChainElem proto.InternalMessageInfo

func (m *SigChainElem) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *SigChainElem) GetNextPubkey() []byte {
	if m != nil {
		return m.NextPubkey
	}
	return nil
}

func (m *SigChainElem) GetMining() bool {
	if m != nil {
		return m.Mining
	}
	return false
}

func (m *SigChainElem) GetSigAlgo() SigAlgo {
	if m != nil {
		return m.SigAlgo
	}
	return SigAlgo_ECDSA
}

func (m *SigChainElem) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SigChain struct {
	Nonce                uint32          `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	DataSize             uint32          `protobuf:"varint,2,opt,name=DataSize,proto3" json:"DataSize,omitempty"`
	DataHash             []byte          `protobuf:"bytes,3,opt,name=DataHash,proto3" json:"DataHash,omitempty"`
	BlockHash            []byte          `protobuf:"bytes,4,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	SrcPubkey            []byte          `protobuf:"bytes,5,opt,name=SrcPubkey,proto3" json:"SrcPubkey,omitempty"`
	DestPubkey           []byte          `protobuf:"bytes,6,opt,name=DestPubkey,proto3" json:"DestPubkey,omitempty"`
	Elems                []*SigChainElem `protobuf:"bytes,7,rep,name=Elems,proto3" json:"Elems,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SigChain) Reset()         { *m = SigChain{} }
func (m *SigChain) String() string { return proto.CompactTextString(m) }
func (*SigChain) ProtoMessage()    {}
func (*SigChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_sigchain_f8b6145f4b67340a, []int{1}
}
func (m *SigChain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigChain.Unmarshal(m, b)
}
func (m *SigChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigChain.Marshal(b, m, deterministic)
}
func (dst *SigChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigChain.Merge(dst, src)
}
func (m *SigChain) XXX_Size() int {
	return xxx_messageInfo_SigChain.Size(m)
}
func (m *SigChain) XXX_DiscardUnknown() {
	xxx_messageInfo_SigChain.DiscardUnknown(m)
}

var xxx_messageInfo_SigChain proto.InternalMessageInfo

func (m *SigChain) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SigChain) GetDataSize() uint32 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

func (m *SigChain) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func (m *SigChain) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *SigChain) GetSrcPubkey() []byte {
	if m != nil {
		return m.SrcPubkey
	}
	return nil
}

func (m *SigChain) GetDestPubkey() []byte {
	if m != nil {
		return m.DestPubkey
	}
	return nil
}

func (m *SigChain) GetElems() []*SigChainElem {
	if m != nil {
		return m.Elems
	}
	return nil
}

func init() {
	proto.RegisterType((*SigChainElem)(nil), "por.SigChainElem")
	proto.RegisterType((*SigChain)(nil), "por.SigChain")
	proto.RegisterEnum("por.SigAlgo", SigAlgo_name, SigAlgo_value)
}

func init() { proto.RegisterFile("sigchain.proto", fileDescriptor_sigchain_f8b6145f4b67340a) }

var fileDescriptor_sigchain_f8b6145f4b67340a = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xd1, 0x4a, 0xfb, 0x30,
	0x14, 0xc6, 0xff, 0xf9, 0x6f, 0xed, 0xba, 0x63, 0x37, 0xf4, 0x30, 0x24, 0x88, 0x48, 0xd9, 0x85,
	0x16, 0x2f, 0x7a, 0x31, 0x9f, 0xa0, 0xae, 0x03, 0x6f, 0x1c, 0x92, 0x3e, 0x41, 0xd7, 0x85, 0x2c,
	0xac, 0x36, 0x25, 0xed, 0x40, 0x7d, 0x1a, 0x5f, 0xcc, 0x77, 0x91, 0xa6, 0x4d, 0xe7, 0x5d, 0xbe,
	0xdf, 0x07, 0x39, 0xdf, 0xf9, 0x0e, 0xcc, 0x6b, 0x29, 0xf2, 0x43, 0x26, 0xcb, 0xa8, 0xd2, 0xaa,
	0x51, 0x38, 0xaa, 0x94, 0x5e, 0x7e, 0x13, 0xf0, 0x53, 0x29, 0xd6, 0x2d, 0xdf, 0x14, 0xfc, 0x1d,
	0x11, 0xc6, 0xf1, 0x7e, 0xaf, 0x29, 0x09, 0x48, 0xe8, 0x33, 0xf3, 0xc6, 0x3b, 0x80, 0x2d, 0xff,
	0x68, 0xde, 0x4e, 0xbb, 0x23, 0xff, 0xa4, 0xff, 0x8d, 0xf3, 0x87, 0xe0, 0x35, 0xb8, 0xaf, 0xb2,
	0x94, 0xa5, 0xa0, 0xa3, 0x80, 0x84, 0x1e, 0xeb, 0x15, 0xde, 0xc3, 0x24, 0x95, 0x22, 0x2e, 0x84,
	0xa2, 0xe3, 0x80, 0x84, 0xf3, 0x95, 0x1f, 0x55, 0x4a, 0x47, 0x3d, 0x63, 0xd6, 0xc4, 0x5b, 0x98,
	0xa6, 0x52, 0x94, 0x59, 0x73, 0xd2, 0x9c, 0x3a, 0xe6, 0xfb, 0x33, 0x58, 0xfe, 0x10, 0xf0, 0x6c,
	0x44, 0x5c, 0x80, 0xb3, 0x55, 0x65, 0xce, 0x4d, 0xbe, 0x19, 0xeb, 0x04, 0xde, 0x80, 0x97, 0x64,
	0x4d, 0x96, 0xca, 0x2f, 0x6e, 0xe2, 0xcd, 0xd8, 0xa0, 0xad, 0xf7, 0x92, 0xd5, 0x07, 0x13, 0xcf,
	0x67, 0x83, 0x6e, 0x07, 0x3f, 0x17, 0x2a, 0x3f, 0x1a, 0x73, 0xdc, 0x0d, 0x1e, 0x80, 0x89, 0xa5,
	0xf3, 0x7e, 0x6b, 0x1b, 0xcb, 0x82, 0xb6, 0x94, 0x84, 0xd7, 0xb6, 0x14, 0xb7, 0x2b, 0xe5, 0x4c,
	0xf0, 0x01, 0x9c, 0xb6, 0xd0, 0x9a, 0x4e, 0x82, 0x51, 0x78, 0xb1, 0xba, 0xb2, 0xab, 0x0f, 0x55,
	0xb3, 0xce, 0x7f, 0x5c, 0x0c, 0x2d, 0xe1, 0x14, 0x9c, 0xcd, 0x3a, 0x49, 0xe3, 0xcb, 0x7f, 0x3b,
	0xd7, 0x1c, 0xe9, 0xe9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x76, 0xf1, 0x8d, 0xb6, 0x01, 0x00,
	0x00,
}
